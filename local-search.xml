<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>社会性动物-他人与环境如何影响我们的思考和行为</title>
    <link href="/2021/04/10/theSocialAnimal/"/>
    <url>/2021/04/10/theSocialAnimal/</url>
    
    <content type="html"><![CDATA[<p>自从前年读了陈海贤老师的《幸福课》后，便逐渐对心理学产生了兴趣。今年终于在3月结束前把《社会性动物》这本经典的心理学书看完了，开始的时候觉得这本书实在难啃，但越来越往后，便对其中的观点越来越有感触。</p><p>读书总结不能一股脑地想把书中所讲的理论或观点都记下来才算读书，我觉得只要把对自己有感触的地方记下来就行了，那么这本书就没有白读。</p><h1 id="什么是社会心理学"><a href="#什么是社会心理学" class="headerlink" title="什么是社会心理学"></a>什么是社会心理学</h1><p>这本书的书名是《社会性动物》，其中所讲的领域属于社会心理学，本书中给社会心理学具体的定义是：</p><blockquote><p>他人真实的、想象的或暗示的存在，对我们的思想、情感、信仰和行为的影响，以及我们如何影响他人的科学研究。</p></blockquote><p>我的理解就是：人是属于社会性的动物，我们所处的周围的环境以及我们所接触到的其他人都在无时无刻地潜移默化地影响着我们的思考与行为，而社会心理学便是研究和解释这种现象的。</p><h1 id="社会认知"><a href="#社会认知" class="headerlink" title="社会认知"></a>社会认知</h1><blockquote><p>偏见盲点：我们认为自己比大多数人更客观、更少偏差。我们偏见性地认为自己不存在偏见。我们的偏见盲点让我们可以轻易地对我们所批评的行为作出合理的解释。</p></blockquote><p>作者提出，我们每个人的心中对某些人或事都存在一定的偏见，但是我们会觉得我们自己是别其其他人更客观，更正确的。并且我们的这种观念会让我们对自己的这种行为去寻找合理的解释。</p><p>前段时间的<code>新冠疫情成都女孩事件</code>便是这一观点的社会案例。当其他人看到女孩一晚上流连过3个酒吧后，便在网上随意地指责她一定是个道德败坏、不正经、不知羞耻的女生。然而去酒吧这件事，对某些人而言可能只是一个下班后放松自己的一种方式、只是去和朋友喝酒的一个场所。我们自己去酒吧就是正常的行为，别人尤其是一个女生大晚上去酒吧就可能在道德上有问题。</p><blockquote><p>证实偏见：证实偏见有助于解释为什么人们顽固地坚守那些牢不可破的信仰。他们会寻找一切可能的证据来支持他们所期待的是正确的，所以他们不必“改变主意”。</p></blockquote><p>在我们自身存在偏见盲点后，我们便会去寻找一些证据来证实我们的偏见，维护我们偏见的正确性。</p><p>当我们津津乐道地谈论着这个成都女孩真是不正经的时候，这时如果网上或者群里有人反驳我们这一论调的话，我们便会拿出：这个女生深夜可是去过3个酒吧呢，正经人谁会一晚上去3个酒吧啊。如果这时候再说服不了对方，我们便会主动去网上寻找一切可以维护我们观点的证据。接着，这个女生的一些朋友圈照片以及个人隐私信息便被扒出来了。你看，这个女生长的就不像正经人；你看，这个女生之前经常去酒吧，她私生活肯定混乱。</p><p>就这样，大部分人都根据“去酒吧不是正经人”这种偏见来定义网上一个陌生的女生，而“3”这个数字便会增强我们的这种偏见，为了证实和维护我们的偏见，我们便会去网上寻找一切可以证明我们偏见正确的信息。最终，女生的隐私信息被越扒越多，一场针对一个普通陌生人的网暴就这样开始了。其中有意思的一点是，一开始被很多人拿来证实自己观点的所谓不正经的<code>女生朋友圈照片</code>，并不是其本人。</p><p>现实生活中类似的偏见例子还有很多，比如：他在星巴克拿出苹果电脑肯定是来装B的，而我拿出电脑是真的有事情做。你看，他甚至都没怎么敲键盘，所以一定是来装B的。</p><blockquote><p>自我中心偏见 人类是一种社会性种群，但我们也是以自我为中心的：我们倾向于把自己置于宇宙的中心,这种也称为聚光灯效应。</p></blockquote><p>自我中心偏见指我们总以为周围的人会很关注到我们，尤其是在我们存在某种缺点或缺陷的时候。比如说我们上学的时候，如果我们的裤子破了，进教室的时候会觉得同学们都能发现我的裤子破了并且会嘲笑我，其实大部分同学并不会。当我们因为做错事而被老师当众批评或者羞辱的时候，我们会觉得无地自容，在同学们面前抬不起头来。然而大部分同学当天可能会记得这件事，但两三天过后，大部分人都忘记了，对这件事耿耿于怀的只有我们自己而已，而且令我们耿耿于怀的并不是被老师羞辱这件事，而是同学们记住这件事让我觉得很丢脸而已。</p><blockquote><p>自我中心偏见会导致我们不加批判地接受错误和谎言。这种心理现象也被称为巴纳姆效应，巴纳姆效应指的是，当人们被赋予可以适用于几乎所有人的模糊、万能的自我描述时，他们通常会说“难以置信！那就是我！”</p></blockquote><p>人们由于自我中心偏见，会对一些普适性的描述，产生共鸣。 比如说:你到一个谋生的环境中开始的时候会比较紧张，接着会让自己慢慢去适应。你偶尔乐观地去生活，有时也会悲观地对未来产生焦虑。大部分对此的反应就是：对对对，这就是我，卧槽，说的太对了，简直神了。这种现象就可以解释为什么大部分人会相信：星座、塔罗牌、算命等预测技术。</p><blockquote><p>人类进化的一个奇怪的特点是它倾向于消极：我们倾向于关注潜在的威胁而不是祝福，这种倾向通常被称为消极偏见。</p></blockquote><p>这就现象就很容易地解释我们为什么会对坏事投向更多关注而不是好事。坏消息为什么比好消息更容易、更经常地被分享，比如说公众人物的一些负面八卦传播地总是比他们所取得的成就传播的快。也能解释为什么有人在朋友圈指责批评某些人，比如：有些人说话真是难听，工作能力真是差劲。当我们在朋友圈看到这些话的时候，我们总会觉得他说的这个人是我。而当这些内容是一些赞美的语句的时候，我们反而会觉得这说的不是我们自己了。</p><blockquote><p>在支配社会生活的所有动机中，最重要的是归属：我们渴望与他人建立稳定、有意义的联系。感觉与社会脱节会导致人们失去调节情绪和控制注意力、行为和冲动的能力。</p></blockquote><p>我们每个人都渴望在某个群体中存在归属感，我们希望与他人有一个良好的关系。而一旦我们被拒绝或者被某个群体排斥了，我们往往会控制不了自己的情绪。比如说，在学校中被排斥或被孤立的学生往往成绩不太好，会具有较强的攻击性并且会很敏感；在公司中，如果领导让我们讨论周五聚餐吃什么，而部门其它成员讨论的时候没有带着我，我往往会会生气，感觉我不属于这个部门，我也会比较抗拒参加这个聚餐。</p><blockquote><p>被重视需要：人类具有让自己感到有价值的强烈动机，希望自己在所在社区中有社会地位、有积极的声誉。他们希望自己的生活有意义——无论是对别人、对家人还是对周围的世界。</p></blockquote><p>我们希望自己在自己家的小区中、家人亲戚中、领导同事中或者同学们中得到重视，或者说是在某个群体中具有较强的存在感。在某个群体中越被重视，越具有存在感，我们便越倾向于和这个群体产生联系。</p><p>如果现在我们有四个微信群，分别是：花园城6栋、李家大家庭、产品研发一部和软院2班。当我们在工作中表现突出的时候，产品研发一部群里在一段时间中会对我赞扬不断，我在平常刷手机的过程中，我也会倾向于关注研发一部群里的消息并会积极参与到聊天中去。而当我升职加薪的时候，研发一部群中已经开始向我表示祝贺了，我在里面寒暄完后，软院2班群里也有人@我并说我很厉害了，我也开始关注平常不主动参与的同学群了。晚上老妈也在李家大家庭中和亲戚们分享了这个好消息，舅舅舅妈们让表弟表妹们向我学习，而一向在家庭群里不怎么发言的我也在群里多说了两句，毕竟群里发言比较多的小辈是我在大厂工作的学霸表哥。</p><blockquote><p>大多数人都能找到满足这些普遍需求的方法，并能在他们的社会里过上和平的生活。但是，对于那些感到被边缘化和被疏远的人来说，对归属和被重视的需要可能比生命本身更珍贵。</p></blockquote><p>我们大部分人都能在社会中与他人产生联系，在某个群体中有归属感并且被重视到，毕竟我们多数人都有疼爱我们的父母、感情稳定的同学同事们和联系紧密的基友、闺蜜们。</p><p>而社会中也存在一些长时间被边缘化被独立的人，他们对归属感和对于被看到的需求可能比他们的生命更重要。这也解释了，为什么在一些国家与他们社会中所信仰的宗教没有任何联系的青少年会离家出走加入到恐怖组织中去，并且会成为一个人肉炸弹的原因。首先他们强烈希望成为一个更大集团中的一员，为他们提供身份和目标，与其它成员产生联系并在集团中产生归属感。其次，他们非常需要确定性、秩序和结构；原教旨主义团体的黑白教条为他们提供了明确的答案——他们在一个不确定的世界中所渴望的确定性。第三，属于恐怖组织，消除了他们认为自己的生命微不足道和毫无意义的感觉，这使得他们感到被重视，感到自己的生命意义重大。</p><blockquote><p>社会认知的一个基本原则是，一切判断都是相对的。在人们看来，好坏的变化不过是与类似的东西对比所形成的,这种效应被称为对比效应。</p></blockquote><p>对比效应告诉我们，我们在判断一件事情或者一个东西好坏的时候，都是通过与另一件事情或另一个东西比较而来的，好坏都是相对的。</p><p>对比效应在日常生活中有许多案例。比如说，房产中介在带客户看房源的时候，往往会先去看一套相对比较差的老旧房子，这套房子不靠近地铁、而且不朝南、靠近马路、声音嘈杂甚至都能闻到街边饭馆做菜的味道。中介说这个房子租金要2500每个月，你惊讶道：卧槽，就这个样子还能租那么贵？谁租谁是傻子吧。中介说没关系，我带你看下一套，这一套南北通透、出小区走十几米就能到地铁站、而且远离马路，非常安静。中介说这房子租金要2600每个月，你感叹说：这房子这么好，就比第一家贵100，真是不错。</p><p>其实这里中介便利用了这种对比效应，第一套房子只是影响你对第二套房子判断的一个诱饵，如果带你一开始看的是第二套，说不定你还要看看其它的。现在你有了对比效应，并且中介告诉你最近来看第二套房子的人很多，现在不定的话说不定就被人抢走了。你很有可能会决定租下第二套房子并交上定金。</p><p>我们在工作过程中也会利用这种对比效应，我们在给客户出app设计图的时候，一般会出3套方案，方案A和方案B比较差劲，各有各的不足，方案C看起来就比较好，没有前2中方案的缺点。这时候，客户看完2个方案后都想骂人了，但是看到相对完善的方案C后，往往会直接敲定用方案C。</p><blockquote><p>我们对自己的重要判断也会受到对比效应的影响。关于我们自己的最有力的信息来源之一是社会比较，这是一种通过将我们自己与他人比较来评估我们的能力、成就、态度和其他特征的过程。</p></blockquote><p>我们经常会将自己与他人比较，有一句话说的好：<strong>一切痛苦的根源都来源于自身与他人的比较。</strong> 高中成绩优异的学生进入到顶尖大学后，发现自己不是班里最聪明的人后，学校里比自己厉害的学生比比皆是，他们不再是受重视、受关注的那批人了。这时候他们有些人便会感到自卑、感到丧气。</p><p>作者也在书中举了一个例子：<strong>当年轻女性在媒体上看到了模特的图片时，也可能会认为自己不如普通女性有吸引力；而今不少人患上了“脸书忧郁症”，这种似是而非的沮丧情绪来自于对朋友审视以及对他们完美生活的了解——他们总有度不完的假期，可爱的小狗，完美的家庭，美妙的聚会等等。</strong>这其中的脸书也可以换成：抖音、微博、朋友圈和ins，当我们在这些社交媒体中看到外表精致的帅哥美女、每天在高端酒店、餐厅打卡、住着别墅开着豪车的时候，我们大部分人也会从这种社会比较重感到焦虑，好像其他人过的都很美好，只有自己过得没有那么好，其实只是社交媒体把我们与美好生活的距离拉近了而已，而这些美好生活的照片和视频中，只有少数是真实的。</p><blockquote><p>最幸福的人不是通过关注他人的行为来评价自己，而是通过调整和参考自己的内在成功标准来评价自己。这就是成长心态，成长心态用来避免与他人进行痛苦的比较。德韦克所说的成长心态指的是，人们所持有的对人类成长能力的信念和对自我提升的承诺。她说：“我们可以把别人看作是灵感和知识的源泉，而不是因此而觉得自己存在某种缺憾。”</p></blockquote><p>既然比较是一切痛苦的根源，那么怎样来避免与他人痛苦的比较呢？书中建议我们更多的关注自身而不是关注他人。我们要知道对于我们自身而言，什么样的生活才是我们满意的生活，而不是通过与他人的对比不断改变或者提高自己的标准。我们要相信自己的能力会越来越好的，并且要专注自我能力的提高，将他人看做我们学习的榜样，而不是对比的样本。</p><blockquote><p>回忆过去存在自传式记忆的偏见：我们构建的记忆更为符合我们自己的想象。正是因为证实偏见的存在，我们更有可能回想起那些证实我们看法的记忆。</p></blockquote><p>作者提出，随着时间的推进，我们对过去的看法也会重构我们的回忆。例如：如果我们觉得我们的童年是痛苦的，不快乐的，那么任何任何背离这种看法的事件都会变得难以回忆。比如说，父母带我们去游乐园玩耍这种事就会很难记起来。而父母对我们的打骂则会最容易回忆起来；如果我们认为上家公司对员工很苛刻，领导对我们的态度特别不好。那么我们更容易记起符合我们看法的领导当众批评指责我们这种事，而不会回忆起我们和同事之间关系融洽的相处这种违背看法的事情。</p><h1 id="自我辩护"><a href="#自我辩护" class="headerlink" title="自我辩护"></a>自我辩护</h1><h1 id="从众"><a href="#从众" class="headerlink" title="从众"></a>从众</h1><h1 id="大众传播，宣传与说服"><a href="#大众传播，宣传与说服" class="headerlink" title="大众传播，宣传与说服"></a>大众传播，宣传与说服</h1><h1 id="人类的攻击性"><a href="#人类的攻击性" class="headerlink" title="人类的攻击性"></a>人类的攻击性</h1><h1 id="偏见"><a href="#偏见" class="headerlink" title="偏见"></a>偏见</h1><h1 id="喜欢、爱与联系"><a href="#喜欢、爱与联系" class="headerlink" title="喜欢、爱与联系"></a>喜欢、爱与联系</h1><h1 id="作为一门科学的社会心理学"><a href="#作为一门科学的社会心理学" class="headerlink" title="作为一门科学的社会心理学"></a>作为一门科学的社会心理学</h1>]]></content>
    
    
    <categories>
      
      <category>读书总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>心理学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于这个博客</title>
    <link href="/2020/12/17/blog/"/>
    <url>/2020/12/17/blog/</url>
    
    <content type="html"><![CDATA[<h2 id="建立博客的初衷"><a href="#建立博客的初衷" class="headerlink" title="建立博客的初衷"></a>建立博客的初衷</h2><p>一个人的社交范围是有限的，而在网上的公开场合是可以遇见更多有趣的人的，希望通过博客能和更多的人进行相互交流和了解。<br>有些生活值得被记录，有些事情需要去反思。<br>希望能把自己的历程比较完整地记录在博客上，能能获得赞同当然好，但如果收到很多有价值的建议与批评，自己也会很开心，因为我会知道自己在哪里还有不足，自己在哪些方便还需要提高与完善，一想到自己又能进步一点点，的确是一件值得开心的事情。</p><h2 id="博客迭代的记录"><a href="#博客迭代的记录" class="headerlink" title="博客迭代的记录"></a>博客迭代的记录</h2><p>我好像是在2017年还在上学的时候，就已经开始建立博客了，一开始会转载一些比较好的技术文章。自己只是写了一两篇，但别人的总归是别人，对自己的价值并不大，自己的博客放别人的文章，像是自己摆好了一个地摊去卖盗版的东西。<br>博客建立初期，喜欢用一些色彩丰富，样式多变，功能全面的主题，比如说之前用过集成了网易云音乐歌单、豆瓣记录和相册功能的主题。后来觉得这种事情对于博客访问者和自己的压力都特别大，访问者不能专心的看博客的文章，会想着看博主的其它信息。而作为博主，在进入博客后，除了看自己文章之外，也会在意自己的书影音和相册记录，这真的会分散很多精力。<br>博客应该专注于内容输入和输出的，而不是一股脑的什么都放在上面。</p><h2 id="关于表达这件事"><a href="#关于表达这件事" class="headerlink" title="关于表达这件事"></a>关于表达这件事</h2><p>表达是为了收获同类而不是为了说服。<br>表达是一个利己的事情，能吸引有机会和自己建立联系但缺少契机的人。<br>专业上的主动表达可以形成一本行走的简历，个人的主观表达可以帮助自己筛选生活圈子。</p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反思</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS中的正则表达式及常用场景示例</title>
    <link href="/2020/12/15/RegExp/"/>
    <url>/2020/12/15/RegExp/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>在写代码过程中，经常会遇到需要正则表达式验证字符的情况，以前常常去网上搜索一个复制下来就用了，但是总是不知道那连在一起的几个乱七八糟的字符是什么意思。于是想着还是认真去学一遍吧，毕竟学到自己脑子里的才算是自己的知识，所以花了几天时间将正则表达式相关的知识重新学习梳理了一遍。</p></blockquote><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>正则表达式(Regular Expression)是一个描述字符模式的对象，JavaScript中的正则表达式用<code>RegExp</code>对象表示，可以使用RegExp()构造函数来创建RegExp对象，但更多时候是用直接量语法来创建。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 通过构造函数来创建: new RegExp(pattern,modifiers)</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;\\ba\\b&quot;</span>,<span class="hljs-string">&quot;g&quot;</span>) <br> <span class="hljs-comment">//全局查找单词a,\b表示匹配一个单词边界，g表示全局匹配</span><br><span class="hljs-comment">// 直接创建: /pattern/modifiers</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\ba\b/g</span><br><br><span class="hljs-comment">//pattern（模式） 描述了表达式的模式</span><br><span class="hljs-comment">//modifiers(修饰符) 用于指定全局匹配、区分大小写的匹配和多行匹配</span><br></code></pre></td></tr></table></figure><p>这里介绍一个在线解析正则的网站，可以将正则表达式图形化：<a href="http://www.regexper.com/">http://www.regexper.com</a>（由于是国外网站，会出现访问慢或者打不开的情况，可以去 <a href="https://gitlab.com/javallone/regexper-static">GitLab</a> 下载源码安装在自己的电脑上使用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[bde]/g</span> <span class="hljs-comment">//全局匹配bde中任何一个字符</span><br></code></pre></td></tr></table></figure><p><img src="http://img.datalearn.top/mweb/regexp1.png" alt="regexp1"></p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>JavaScript 正则表达式中的所有字母和数字都是按照字面含义进行匹配的，比如 /javascript/ 可以匹配所有包含 javascript 的字符串，此外还支持非字母的字符匹配，这些字符需要通过反斜杠\进行转义，构成转义字符<code>/\//</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;I have a banana and a pear&#x27;</span><br><span class="hljs-comment">//把单词a换成A</span><br><span class="hljs-comment">//使用字符串的replace函数</span><br><span class="hljs-keyword">var</span> reg  = <span class="hljs-regexp">/a/</span>  <span class="hljs-comment">//匹配字符a</span><br>str.replace(reg,<span class="hljs-string">&#x27;A&#x27;</span>) <span class="hljs-comment">//I hAve a banana a pear</span><br><span class="hljs-comment">//这时候发现把单词中的a也替换成大写A了，我们只想把单词a换成大A</span><br><span class="hljs-comment">//需要我们需要制定他的匹配位置，需要用到\b来匹配单词边界：单词和符号之间的边界</span><br>reg = <span class="hljs-regexp">/\ba\b/</span><br>str.replace(reg,<span class="hljs-string">&#x27;A&#x27;</span>) <span class="hljs-comment">//I have A banana a pear</span><br><br><span class="hljs-comment">//元字符^的用法,匹配字符串开头</span><br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/b/g</span><br><span class="hljs-string">&#x27;babbaa&#x27;</span>.replace(reg1,<span class="hljs-string">&#x27;B&#x27;</span>) <span class="hljs-comment">//BdBBaa 将所有b匹配到了</span><br><span class="hljs-comment">//现在加上^字符后，只会匹配字符串的开头的b</span><br>reg1 = <span class="hljs-regexp">/^b/g</span>  <span class="hljs-comment">//Bdbbaa</span><br><br><span class="hljs-comment">//元字符$的用法,匹配字符串结尾</span><br>reg1 = <span class="hljs-regexp">/a$/g</span><br><span class="hljs-string">&#x27;babbaa&#x27;</span>.replace(reg1,<span class="hljs-string">&#x27;A&#x27;</span>) <span class="hljs-comment">//babbaA ,只匹配字符串结尾处的a</span><br><br><span class="hljs-comment">//元字符\B的用法,匹配非单词边界，就是字符与字符之间的位置</span><br>reg1 = <span class="hljs-regexp">/\B/g</span><br><span class="hljs-string">&#x27;ab cd&#x27;</span>.replace(reg1,<span class="hljs-string">&#x27;A&#x27;</span>) <span class="hljs-comment">//aAb cAd 匹配到两个字符之间的边界</span><br></code></pre></td></tr></table></figure><h2 id="元字符-位置类"><a href="#元字符-位置类" class="headerlink" title="元字符-位置类"></a>元字符-位置类</h2><table><thead><tr><th align="left">字符</th><th align="left">含义</th><th align="left">英文</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配字符串的开头</td><td align="left"></td></tr><tr><td align="left">$</td><td align="left">匹配字符串的结尾</td><td align="left"></td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词的边界，就是位于字符\w和\W之间的位置，或位于\w与字符串开头或结尾的位置</td><td align="left">boundary</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界的位置</td><td align="left">boundary</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//接上面匹配替换的结果：I have A banana a pear</span><br><span class="hljs-comment">//发现,只配了第一个单词a，后面的a没有匹配到，这时候需要用到全局匹配，使用修饰符g</span><br>reg = <span class="hljs-regexp">/\ba\b/g</span><br>str.replace(reg,<span class="hljs-string">&#x27;A&#x27;</span>) <span class="hljs-comment">//I have A banana and A pear</span><br><span class="hljs-comment">//这时候两个单词a都被匹配到了。</span><br><br><span class="hljs-comment">//修饰符i的用法,忽略大小写</span><br>reg  = <span class="hljs-regexp">/i/</span> <span class="hljs-comment">//现在我们想匹配字符串中的I，并替换成You</span><br>str.replace(reg,<span class="hljs-string">&#x27;You&#x27;</span>) <span class="hljs-comment">//I have A banana and A pear ,没有匹配到</span><br><span class="hljs-comment">//在后面加上i便可忽略大小写进行匹配</span><br>reg  = <span class="hljs-regexp">/i/i</span><br>str.replace(reg,<span class="hljs-string">&#x27;You&#x27;</span>) <span class="hljs-comment">//You have a banana and an pear</span><br><br><span class="hljs-comment">//修饰符m的用法,多行匹配</span><br><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">`11</span><br><span class="hljs-string">12</span><br><span class="hljs-string">13`</span><br><span class="hljs-comment">//现在我们想将3个字符开头的1替换成5</span><br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/^1/g</span><br>str1.replace(reg1,<span class="hljs-string">&#x27;5&#x27;</span>) <br><span class="hljs-comment">//51</span><br><span class="hljs-comment">//12</span><br><span class="hljs-comment">//13</span><br><span class="hljs-comment">//根据结果只替换了第一个字符，因为即使字符串看上去换行,本质上还是一些换行符,只有结尾和结束</span><br><span class="hljs-comment">//现在加上修饰符m来处理</span><br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/^1/gm</span><br>str1.replace(reg1,<span class="hljs-string">&#x27;5&#x27;</span>)<br><span class="hljs-comment">//51</span><br><span class="hljs-comment">//52</span><br><span class="hljs-comment">//53</span><br><span class="hljs-comment">//成功将三个字符开头的1替换成了5</span><br></code></pre></td></tr></table></figure><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>修饰符用于执行区分大小写和全局匹配:</p><table><thead><tr><th align="left">字符</th><th align="left">含义</th><th align="left">英文</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">执行对大小写不敏感的匹配。</td><td align="left">ignore case</td></tr><tr><td align="left">g</td><td align="left">执行全局匹配（不止匹配第一个）</td><td align="left">global</td></tr><tr><td align="left">m</td><td align="left">执行多行匹配。</td><td align="left">multiple lines</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//上面提到了多行匹配，正则表达式的语法中也提供了匹配换行符的方法，使用 \n</span><br><span class="hljs-comment">//继续使用上面定义的str1字符串</span><br><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">`11</span><br><span class="hljs-string">12</span><br><span class="hljs-string">13`</span><br>reg1 = <span class="hljs-regexp">/\n/g</span><br>str1.replace(reg1,<span class="hljs-string">&#x27;5&#x27;</span>) <span class="hljs-comment">// 11512513</span><br><span class="hljs-comment">//这时候原字符串不换行了，因为换行符全被替换成了5</span><br><br><span class="hljs-comment">//匹配制表符\t的使用</span><br><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&#x27;aaaaaa&#x27;</span>;<br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/\t/g</span><br>str1.replace(reg1,<span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-comment">//abaabbaaa ,将所有制表符换成了字符b</span><br><br><span class="hljs-comment">//匹配垂直制表符\v </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;i am \v Kyree&#x27;</span>) <span class="hljs-comment">//i am  Kyree</span><br><span class="hljs-comment">//javaScript 中没有垂直制表符，在C中会在垂直制表符位置换行继续输出</span><br><br><span class="hljs-comment">//匹配换页符/f，一般情况用不到，在提取word文档的中内容可以用到</span><br><br><span class="hljs-comment">//匹配回车符/r，\r 代表的是 回车符(ACSII: 13 或0x0d), 也就是&quot;硬回车&quot;</span><br><span class="hljs-comment">// \n 代表的是 换行符(ACSII: 10 或 0x0a), 也就是 &quot;软回车&quot;</span><br></code></pre></td></tr></table></figure><h2 id="元字符-转义类"><a href="#元字符-转义类" class="headerlink" title="元字符-转义类"></a>元字符-转义类</h2><table><thead><tr><th align="left">字符</th><th align="left">含义</th><th align="left">英文</th></tr></thead><tbody><tr><td align="left">\o</td><td align="left">NULL字符</td><td align="left">ignore case</td></tr><tr><td align="left">\t</td><td align="left">制表符</td><td align="left">tabulator</td></tr><tr><td align="left">\n</td><td align="left">换行符</td><td align="left">newline</td></tr><tr><td align="left">\v</td><td align="left">垂直制表符</td><td align="left">verticality</td></tr><tr><td align="left">\f</td><td align="left">换页符</td><td align="left">form feed</td></tr><tr><td align="left">\r</td><td align="left">回车符</td><td align="left">return</td></tr><tr><td align="left">\xnn</td><td align="left">十六进制数nn指定的字符</td><td align="left"></td></tr><tr><td align="left">\uxxxx</td><td align="left">十六进制数xxxx指定的Unicode字符</td><td align="left">Unicode</td></tr><tr><td align="left">\cX</td><td align="left">控制字符^X</td><td align="left">Control</td></tr><tr><td align="left">\</td><td align="left">反斜杠\</td><td align="left"></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//有时候我们想匹配一个字符串中所包含的任意字符，这时候便需要用到 []</span><br><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&#x27;abcd12345&#x27;</span>;<br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/[bde]/g</span><br>str1.replace(reg1,<span class="hljs-string">&#x27;6&#x27;</span>) <span class="hljs-comment">//a6c612345，只要匹配到了b或者d或者e，便将其替换成6</span><br><br><span class="hljs-comment">//方括号前面加上^便是取反的意思，不在方括号内的任意字符</span><br>reg1 = <span class="hljs-regexp">/[^bde]/g</span><br>str1.replace(reg1,<span class="hljs-string">&#x27;6&#x27;</span>) <span class="hljs-comment">//6b6d66666，只要不是b或者d或者e的，全部替换成6</span><br><br><span class="hljs-comment">// .  除了换行符以外的任意字符</span><br>reg1 = <span class="hljs-regexp">/./g</span><br>str1.replace(reg1,<span class="hljs-string">&#x27;6&#x27;</span>) <span class="hljs-comment">//666666666 ,等价于[^\n\r]</span><br><br><span class="hljs-comment">// 匹配大小写字母或者数字 \w</span><br><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&#x27;我有1个iPhone手机&#x27;</span>;<br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/\w/g</span><br>str1.replace(reg1,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">//我有a个aaaaaa手机,将数字和大小写字母都匹配到了</span><br><br><span class="hljs-comment">// 匹配非大小写字母或者数字 \W</span><br>reg1 = <span class="hljs-regexp">/\W/g</span><br>str1.replace(reg1,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">//aa1aiPhoneaa,除了数字和大小写字母意外，都匹配到了</span><br><br><span class="hljs-comment">// 匹配空白符、空格，/s</span><br><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&#x27;我 有1个iP hone手 机&#x27;</span>;<br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/\s/g</span><br>str1.replace(reg1,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">//我a有1个iPahone手a机,将空格符都替换成了a</span><br><span class="hljs-comment">//同样取反是大写的 ，\S ，匹配任何非空白符</span><br>reg1 = <span class="hljs-regexp">/\S/g</span><br>str1.replace(reg1,<span class="hljs-string">&#x27;a&#x27;</span>)  <span class="hljs-comment">//a aaaaa aaaaa a ,忽略掉了所有空白符</span><br><br><span class="hljs-comment">//匹配任何数字 \d</span><br><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&#x27;1个iPhone，2台Mac&#x27;</span>;<br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/\d/g</span><br>str1.replace(reg1,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">//a个iPhone，a台Mac</span><br></code></pre></td></tr></table></figure><h2 id="元字符-字符类"><a href="#元字符-字符类" class="headerlink" title="元字符-字符类"></a>元字符-字符类</h2><table><thead><tr><th align="left">字符</th><th align="left">含义</th><th align="left">英文</th></tr></thead><tbody><tr><td align="left">[…]</td><td align="left">方括号内的任意字符</td><td align="left"></td></tr><tr><td align="left">[^…]</td><td align="left">不在方括号内的任意字符</td><td align="left"></td></tr><tr><td align="left">.</td><td align="left">除换行符及其他Unicode行终止符之外的任意字符，等价 [^\n\r]</td><td align="left"></td></tr><tr><td align="left">\w</td><td align="left">任何ASCII字符组成的单词，等价于[a-zA-Z0-9]</td><td align="left">words</td></tr><tr><td align="left">\W</td><td align="left">任何非ASCII字符组成的单词，等价于[^a-zA-Z0-9]</td><td align="left">words</td></tr><tr><td align="left">\s</td><td align="left">任何Unicode空白符</td><td align="left">space</td></tr><tr><td align="left">\S</td><td align="left">任何非Unicode空白符的字符</td><td align="left">space</td></tr><tr><td align="left">\d</td><td align="left">任何ASCII数字，等价于[0-9]</td><td align="left">digits</td></tr><tr><td align="left">\D</td><td align="left">除ASCII数字之外的任意字符，等价于[^0-9]</td><td align="left">digits</td></tr><tr><td align="left">[\b]</td><td align="left">退格符（特例）</td><td align="left">backspace</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//当需要对同一类型进行多次匹配的时候，这时候就需要用到量词</span><br><br><span class="hljs-comment">//比如说，使用&#123;n&#125;来匹配前一项n次</span><br><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/\d&#123;4&#125;/g</span>  <span class="hljs-comment">//匹配字符串中出现4次数字的情况</span><br>str1.replace(reg1,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">//a56,</span><br><span class="hljs-comment">//第一次匹配到出现4次数字的情况，将1234替换成a，a56不符合匹配规则，匹配停止</span><br>str1 = <span class="hljs-string">&#x27;123456789&#x27;</span><br>str1.replace(reg1,<span class="hljs-string">&#x27;a&#x27;</span>)<span class="hljs-comment">//aa9</span><br><span class="hljs-comment">//这时候第一次匹配完后，变成a56789，符合规则继续匹配后，变成aa9,aa9不符合规则，匹配停止</span><br><br><span class="hljs-comment">// &#123;n,m&#125; 代表前一项至少n次，但不能超过m次，小于等于m</span><br><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&#x27;12345&#x27;</span>;<br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/\d&#123;2,4&#125;/g</span>  <span class="hljs-comment">//字符串中匹配至少出现2次数字，最多出现4次数字</span><br>str1.replace(reg1,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">// a5</span><br><span class="hljs-comment">//匹配重复字符是尽可能多的匹配,所以是先匹配出现4次的情况，变成a5后，不符合规则，停止匹配</span><br><span class="hljs-comment">//这种尽可能匹配多的模式 称为贪婪模式</span><br><span class="hljs-comment">//如果想进行非贪婪的匹配，只需在待匹配的字符后面跟上一个问号即可</span><br>reg1 = <span class="hljs-regexp">/\d&#123;2,4&#125;?/g</span>  <br>str1.replace(reg1,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">// aa5 ,这时候就尽可能从最少的来匹配</span><br></code></pre></td></tr></table></figure><h2 id="元字符-重复类"><a href="#元字符-重复类" class="headerlink" title="元字符-重复类"></a>元字符-重复类</h2><table><thead><tr><th align="left">字符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">{n,m}</td><td align="left">匹配前一项至少n次，但不能超过m次</td></tr><tr><td align="left">{n,}</td><td align="left">匹配前一项至少n次</td></tr><tr><td align="left">{n}</td><td align="left">匹配前一项n次</td></tr><tr><td align="left">?</td><td align="left">匹配前一项0次或1次，等价于{0,1},最多出现一次</td></tr><tr><td align="left">+</td><td align="left">匹配前一项1次或多次，等价于{1,},至少出现一次</td></tr><tr><td align="left">*</td><td align="left">匹配前一项0次或多次，等价于{0,}</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//如果想匹配出现多个单词的情况，这时候就需要用到分组匹配</span><br><span class="hljs-comment">//现在我们想把出现2次iPhone的替换成iPad</span><br><span class="hljs-string">&#x27;iPhoneiPhonee&#x27;</span>.replace(<span class="hljs-regexp">/iPhone&#123;2&#125;/g</span>,<span class="hljs-string">&#x27;iPad&#x27;</span>) <span class="hljs-comment">//iPhoneiPad</span><br><span class="hljs-comment">//这样写的话，是先匹配iPhon，接着匹配出现2次e的情况，所以后面的iPhonee被替换成了iPad</span><br><span class="hljs-comment">//这种情况需要用到分组匹配符 ()</span><br><span class="hljs-string">&#x27;iPhoneiPhonee&#x27;</span>.replace(<span class="hljs-regexp">/(iPhone)&#123;2&#125;/g</span>,<span class="hljs-string">&#x27;iPad&#x27;</span>) <span class="hljs-comment">//iPade ,成功匹配到了</span><br><br><span class="hljs-comment">//选择符或 | </span><br><span class="hljs-string">&#x27;ab&#x27;</span>.replace(<span class="hljs-regexp">/a|ab/g</span>,<span class="hljs-string">&#x27;c&#x27;</span>) <span class="hljs-comment">//cb,匹配a或者ab，从左往右顺序，所以最终只有a被匹配到了</span><br><br><span class="hljs-comment">//分组和选择的结合</span><br><span class="hljs-string">&#x27;abdacd&#x27;</span>.replace(<span class="hljs-regexp">/a(b|c)d/g</span>,<span class="hljs-string">&#x27;X&#x27;</span>) <span class="hljs-comment">// XX ,表示abd或者acd都符合匹配规则</span><br><br><span class="hljs-comment">//分组的反向引用，分组捕获</span><br><span class="hljs-comment">//现在想要将日期字符串更改表示方法：2020-12-14=&gt;12/14/2020</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;/</span> <span class="hljs-comment">//首先是匹配到初始日期的字符串</span><br><span class="hljs-comment">//接着将正则表达式进行分组</span><br>reg = <span class="hljs-regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span><br><span class="hljs-comment">//最后使用$进行分组捕获,此时</span><br><span class="hljs-comment">//$1代表(\d&#123;4&#125;)值为2020</span><br><span class="hljs-comment">//$2代表(\d&#123;2&#125;)值为12</span><br><span class="hljs-comment">//$3代表(\d&#123;3&#125;)值为14</span><br><span class="hljs-comment">//最后在捕获到的分组之间加上/进行替换</span><br><span class="hljs-string">&#x27;2020-12-14&#x27;</span>.replace(<span class="hljs-regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>,<span class="hljs-string">&#x27;$2/$3/$1&#x27;</span>) <span class="hljs-comment">//12/14/2020</span><br><br><span class="hljs-comment">//分组忽略，如果想将某一个分组忽略掉，只要在前面加上?:即可。</span><br>reg = <span class="hljs-regexp">/(?:\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span><br><span class="hljs-comment">//此时分组捕获2020已经被忽略掉了</span><br><span class="hljs-comment">//$1代表(\d&#123;2&#125;)值为12</span><br><span class="hljs-comment">//$2代表(\d&#123;3&#125;)值为14</span><br></code></pre></td></tr></table></figure><h2 id="元字符-操作类"><a href="#元字符-操作类" class="headerlink" title="元字符-操作类"></a>元字符-操作类</h2><table><thead><tr><th align="left">字符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">|</td><td align="left">选择，匹配该字符左边或右边的表达式</td></tr><tr><td align="left">(…)</td><td align="left">组合，将几个项组成一个单元</td></tr><tr><td align="left">(?:…)</td><td align="left">只组合，不可引用</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//RegExp对象为我们提供了3种方法</span><br><br><span class="hljs-comment">//exec 检索字符串中指定的值，返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为null</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;I have an banana&#x27;</span><br><span class="hljs-keyword">var</span> reg  = <span class="hljs-regexp">/a/g</span><br>reg.exec(str) <br><span class="hljs-comment">//输出结果</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">[</span><br><span class="hljs-comment">  &#x27;a&#x27;,  //第一个元素是与正则表达式相匹配的文本</span><br><span class="hljs-comment">  index: 3, //index: 表示匹配项在字符串中的位置,也就是匹配项第一个字符的位置  </span><br><span class="hljs-comment">  input: &#x27;I have an banana&#x27;, //input: 表示应用正则表达式的字符串</span><br><span class="hljs-comment">  groups: undefined</span><br><span class="hljs-comment">]</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 正则表达式中分组匹配的情况</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;2020-12-15&#x27;</span><br><span class="hljs-keyword">var</span> reg  = <span class="hljs-regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span><br>reg.exec(str)<br><span class="hljs-comment">/*[</span><br><span class="hljs-comment">  &#x27;2020-12-15&#x27;,//第一个元素是与正则表达式相匹配的文本</span><br><span class="hljs-comment">  &#x27;2020&#x27;,//第二个元素是与正则对象第一个子表达式相匹配的文本,也就是第一个分组(如果有的话)</span><br><span class="hljs-comment">  &#x27;12&#x27;,//第三个元素是与正则对象第二个子表达式相匹配的文本,也就是第二个分组(如果有的话)</span><br><span class="hljs-comment">  &#x27;15&#x27;,//第四个元素是与正则对象第三个子表达式相匹配的文本,也就是第三个分组(如果有的话)</span><br><span class="hljs-comment">  index: 0,//index: 表示匹配项在字符串中的位置,也就是匹配项第一个字符的位置  </span><br><span class="hljs-comment">  input: &#x27;2020-12-15&#x27;,//input: 表示应用正则表达式的字符串</span><br><span class="hljs-comment">  groups: undefined</span><br><span class="hljs-comment">]*/</span><br><br><span class="hljs-comment">//如果正则表达式有g标识，在每次执行完exec后，该正则对象的lastIndex值就会被改变，</span><br><span class="hljs-comment">//该值表示下次匹配的开始下标</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;I have an banana&#x27;</span><br><span class="hljs-keyword">var</span> reg  = <span class="hljs-regexp">/a/g</span><br>reg.exec(str) <span class="hljs-comment">//[ &#x27;a&#x27;, index: 3, input: &#x27;I have an banana&#x27;, groups: undefined ]</span><br>reg.lastIndex <span class="hljs-comment">//4</span><br>reg.exec(str) <span class="hljs-comment">//[ &#x27;a&#x27;, index: 7, input: &#x27;I have an banana&#x27;, groups: undefined ]</span><br>reg.lastIndex <span class="hljs-comment">//8</span><br><br><span class="hljs-comment">//输出结果中的groups的含义：用来存储命名捕获组的信息</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;ab&#x27;</span><br><span class="hljs-keyword">var</span> reg  = <span class="hljs-regexp">/(?&lt;first&gt;\w)(?&lt;second&gt;\w)/</span>  <span class="hljs-comment">//语法为：(?&lt;捕获组的名字&gt;捕获组对应的规则)</span><br>reg.exec(str).groups<span class="hljs-comment">// &#123; first: &#x27;a&#x27;, second: &#x27;b&#x27; &#125;</span><br><br><span class="hljs-comment">//test():用来查看正则表达式与指定的字符串是否匹配。匹配到返回 true,否则返回false。</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;ab&#x27;</span><br><span class="hljs-keyword">var</span> reg  = <span class="hljs-regexp">/a/</span><br><span class="hljs-keyword">var</span> reg1  = <span class="hljs-regexp">/c/</span><br>reg.test(str)  <span class="hljs-comment">//true</span><br>reg1.test(str)  <span class="hljs-comment">//false</span><br><span class="hljs-comment">//当正则表达式使用全局模式时,lastIndex属性会影响test()方法的返回值</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;ab&#x27;</span><br><span class="hljs-keyword">var</span> reg  = <span class="hljs-regexp">/\w/g</span><br>reg.test(str)+<span class="hljs-string">&#x27;,lastindex:&#x27;</span>+reg.lastIndex <span class="hljs-comment">//true,lastindex:1</span><br>reg.test(str)+<span class="hljs-string">&#x27;,lastindex:&#x27;</span>+reg.lastIndex <span class="hljs-comment">//true,lastindex:2</span><br>reg.test(str)+<span class="hljs-string">&#x27;,lastindex:&#x27;</span>+reg.lastIndex <span class="hljs-comment">//false,lastindex:0 ,再次变成0</span><br>reg.test(str)+<span class="hljs-string">&#x27;,lastindex:&#x27;</span>+reg.lastIndex <span class="hljs-comment">//true,lastindex:1</span><br><br><span class="hljs-comment">//toString:返回正则表达式的字符串</span><br><span class="hljs-keyword">var</span> reg  = <span class="hljs-regexp">/\w/g</span><br>reg.toString() <span class="hljs-comment">//  /\w/g</span><br></code></pre></td></tr></table></figure><h2 id="RegExp-对象方法"><a href="#RegExp-对象方法" class="headerlink" title="RegExp 对象方法"></a>RegExp 对象方法</h2><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">exec</td><td align="left">检索字符串中指定的值。返回找到的值，并确定其位置。</td></tr><tr><td align="left">test</td><td align="left">检索字符串中指定的值，返回 true 或 false。</td></tr><tr><td align="left">toString</td><td align="left">返回正则表达式的字符串。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在string对象中，也有支持正则表达式的方法</span><br><br><span class="hljs-comment">//search方法执行正则表达式和 String对象之间的一个搜索匹配</span><br><span class="hljs-comment">//如果匹配成功,返回正则表达式在字符串中首次匹配项的索引,否则返回-1。</span><br><span class="hljs-string">&#x27;ab&#x27;</span>.search(<span class="hljs-regexp">/b/</span>)  <span class="hljs-comment">//1</span><br><span class="hljs-string">&#x27;ab&#x27;</span>.search(<span class="hljs-regexp">/c/</span>)  <span class="hljs-comment">//-1</span><br><br><span class="hljs-comment">//match(),用于搜索字符串,找到一个或多个与正则表达式匹配的字符</span><br><span class="hljs-comment">//返回：一个包含了整个匹配结果以及任何括号捕获的匹配结果的 Array ；如果没有匹配项，则返回 null。</span><br><span class="hljs-string">&#x27;I hava a banana&#x27;</span>.match(<span class="hljs-regexp">/a/</span>)<span class="hljs-comment">//[ &#x27;a&#x27;, index: 3, input: &#x27;I hava a banana&#x27;, groups: undefined ]</span><br><span class="hljs-comment">//全局匹配，返回一个数组,存放字符串中所有匹配的字符串</span><br><span class="hljs-string">&#x27;I hava a banana&#x27;</span>.match(<span class="hljs-regexp">/a/g</span>)<span class="hljs-comment">//[ &#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27; ]</span><br><br><span class="hljs-comment">//replace()方法，原字符不变的情况下，返回一个由替换值替换一些或所有匹配的模式后的新字符串</span><br><span class="hljs-string">&#x27;a1b2c3d&#x27;</span>.replace(<span class="hljs-regexp">/\d/</span>,<span class="hljs-string">&#x27;X&#x27;</span>) <span class="hljs-comment">//aXbXcXd</span><br><br><span class="hljs-comment">//分隔符split() ，使用指定的分隔符字符串将一个String对象分割成字符串数组</span><br><span class="hljs-comment">//语法：str.split([separator[, limit]]);</span><br><span class="hljs-string">&#x27;a, b, c, d&#x27;</span>.split(<span class="hljs-regexp">/,/</span>) <span class="hljs-comment">//[&quot;a&quot;, &quot; b&quot;, &quot; c&quot;, &quot; d&quot;]</span><br><span class="hljs-string">&#x27;a, b, c, d&#x27;</span>.split(,) <span class="hljs-comment">//[&quot;a&quot;, &quot; b&quot;, &quot; c&quot;, &quot; d&quot;]，当separator为字符串时,其实也是默认转成正则去执行</span><br><span class="hljs-comment">//分组分割</span><br><span class="hljs-string">&#x27;a1b2c3&#x27;</span>.split(<span class="hljs-regexp">/(\d)/</span>) <span class="hljs-comment">//[&quot;a&quot;, &quot;1&quot;, &quot;b&quot;, &quot;2&quot;, &quot;c&quot;, &quot;3&quot;, &quot;d&quot;]</span><br><span class="hljs-comment">//限制返回值中分割元素数量</span><br><span class="hljs-string">&#x27;a1b2c3&#x27;</span>.split(<span class="hljs-regexp">/(\d)/</span>,<span class="hljs-number">3</span>) <span class="hljs-comment">//[ &#x27;a&#x27;, &#x27;1&#x27;, &#x27;b&#x27; ]</span><br><br></code></pre></td></tr></table></figure><h2 id="String-对象方法"><a href="#String-对象方法" class="headerlink" title="String 对象方法"></a>String 对象方法</h2><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">search</td><td align="left">检索与正则表达式相匹配的值。</td></tr><tr><td align="left">match</td><td align="left">找到一个或多个正则表达式的匹配。</td></tr><tr><td align="left">replace</td><td align="left">替换与正则表达式匹配的子串。</td></tr><tr><td align="left">split</td><td align="left">把字符串分割为字符串数组。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//当然，RegExp对象也内置很多属性</span><br><br><span class="hljs-comment">//constructor ,返回一个函数，该函数是一个创建RegExp对象的原型</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>)<br>reg.constructor <span class="hljs-comment">//ƒ RegExp() &#123; [native code] &#125;</span><br><br><span class="hljs-comment">//global 判断是否设置了g修饰符</span><br><span class="hljs-comment">//ignoreCase 判断是否设置了i修饰符</span><br><span class="hljs-comment">//multiline 判断是否设置了m修饰符</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a/g</span><br>reg.global  <span class="hljs-comment">// true</span><br>reg.ignoreCase  <span class="hljs-comment">//false</span><br>reg.multiline  <span class="hljs-comment">//false</span><br><br><span class="hljs-comment">//lastIndex 设置下次匹配的开始位置,该属性只有设置了g标志才能使用</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;ab&#x27;</span><br><span class="hljs-keyword">var</span> reg  = <span class="hljs-regexp">/\w/g</span><br>reg.test(str)+<span class="hljs-string">&#x27;,lastindex:&#x27;</span>+reg.lastIndex <span class="hljs-comment">//true,lastindex:1</span><br>reg.test(str)+<span class="hljs-string">&#x27;,lastindex:&#x27;</span>+reg.lastIndex <span class="hljs-comment">//true,lastindex:2</span><br>reg.lastIndex = <span class="hljs-number">0</span>    <span class="hljs-comment">//此时手动将lastIndex设置为0，所以下列输出为true，否则为false</span><br>reg.test(str)+<span class="hljs-string">&#x27;,lastindex:&#x27;</span>+reg.lastIndex <span class="hljs-comment">//true,lastindex:1</span><br><br></code></pre></td></tr></table></figure><h2 id="RegExp-对象属性"><a href="#RegExp-对象属性" class="headerlink" title="RegExp 对象属性"></a>RegExp 对象属性</h2><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">constructor</td><td align="left">返回一个函数，该函数是一个创建 RegExp 对象的原型。</td></tr><tr><td align="left">global</td><td align="left">判断是否设置了 “g” 修饰符</td></tr><tr><td align="left">ignoreCase</td><td align="left">判断是否设置了 “i” 修饰符</td></tr><tr><td align="left">lastIndex</td><td align="left">用于规定下次匹配的起始位置</td></tr><tr><td align="left">multiline</td><td align="left">判断是否设置了 “m” 修饰符</td></tr><tr><td align="left">source</td><td align="left">返回正则表达式的匹配模式</td></tr></tbody></table><h1 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h1><h2 id="检测用户名"><a href="#检测用户名" class="headerlink" title="检测用户名"></a>检测用户名</h2><h3 id="非中文用户名"><a href="#非中文用户名" class="headerlink" title="非中文用户名"></a>非中文用户名</h3><p>规则如下</p><ul><li>最短4位，最长16位 {4,16}</li><li>可以包含小写大母 [a-z] 和大写字母 [A-Z]</li><li>可以包含数字 [0-9]</li><li>可以包含下划线 [ _ ] 和减号 [ - ]</li><li>首字母只能是大小写字母</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[a-zA-Z][a-zA-Z0-9_-]&#123;3,15&#125;$/</span>;<br>reg.test(<span class="hljs-string">&#x27;kyree&#x27;</span>) <span class="hljs-comment">//true</span><br>reg.test(<span class="hljs-string">&#x27;3Mike&#x27;</span>) <span class="hljs-comment">// false</span><br><br></code></pre></td></tr></table></figure><p>图解：</p><p><img src="http://img.datalearn.top/mweb/regexp2.png" alt="regexp2"></p><h3 id="中文用户名"><a href="#中文用户名" class="headerlink" title="中文用户名"></a>中文用户名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// [\u4E00-\u9FA5]是汉字的正则匹配，包括基本汉字2万多个</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[a-zA-Z\u4E00-\u9FA5][a-zA-Z0-9\u4E00-\u9FA5_-]&#123;3,15&#125;$/</span>;<br>reg.test(<span class="hljs-string">&#x27;CV打字员&#x27;</span>) <span class="hljs-comment">//true</span><br>reg.test(<span class="hljs-string">&#x27;kyree@&#x27;</span>) <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>图解：</p><p><img src="http://img.datalearn.top/mweb/regexp3.png" alt="regexp3"></p><h2 id="检测密码强度"><a href="#检测密码强度" class="headerlink" title="检测密码强度"></a>检测密码强度</h2><p>密码规则：最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^.*(?=.&#123;6,&#125;)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/</span>;<br>reg.test(<span class="hljs-string">&#x27;Kyree123@&#x27;</span>) <span class="hljs-comment">//true</span><br>reg.test(<span class="hljs-string">&#x27;kyree..&#x27;</span>) <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>图解：</p><p><img src="http://img.datalearn.top/mweb/regexp5.png" alt="regexp5"></p><h2 id="检测日期"><a href="#检测日期" class="headerlink" title="检测日期"></a>检测日期</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^(?:(?!0000)[0-9]&#123;4&#125;-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]&#123;2&#125;(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/</span>;<br>reg.test(<span class="hljs-string">&#x27;2020-12-15&#x27;</span>) <span class="hljs-comment">//true</span><br>reg.test(<span class="hljs-string">&#x27;2021-02-29&#x27;</span>) <span class="hljs-comment">//false ,2021年的2月只有28天</span><br></code></pre></td></tr></table></figure><p>图解：</p><p><img src="http://img.datalearn.top/mweb/regexp4.png" alt="regexp4"></p><h2 id="检测邮箱地址"><a href="#检测邮箱地址" class="headerlink" title="检测邮箱地址"></a>检测邮箱地址</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]&#123;2,8&#125;)$/</span><br>reg.test(<span class="hljs-string">&#x27;kyreem@163.com&#x27;</span>) <span class="hljs-comment">//true</span><br>reg.test(<span class="hljs-string">&#x27;kyreem@163.163&#x27;</span>) <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>图解：</p><p><img src="http://img.datalearn.top/mweb/regexp6-1.png" alt="regexp6"></p><h2 id="检测手机号码"><a href="#检测手机号码" class="headerlink" title="检测手机号码"></a>检测手机号码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\d&#123;8&#125;$/</span>;<br>reg.test(<span class="hljs-string">&#x27;13088888888&#x27;</span>) <span class="hljs-comment">//true</span><br>reg.test(<span class="hljs-string">&#x27;12062516875&#x27;</span>) <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>图解：</p><p><img src="http://img.datalearn.top/mweb/regexp7-1.png" alt="regexp7"></p><h2 id="检测身份证号码"><a href="#检测身份证号码" class="headerlink" title="检测身份证号码"></a>检测身份证号码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//身份证号码18位</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$/</span>;<br>reg.test(<span class="hljs-string">&#x27;110105199806053713&#x27;</span>) <span class="hljs-comment">//true</span><br>reg.test(<span class="hljs-string">&#x27;110105199806323713&#x27;</span>) <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>图解：</p><p><img src="http://img.datalearn.top/mweb/regexp8.png" alt="regexp8"></p><h2 id="检测车牌号"><a href="#检测车牌号" class="headerlink" title="检测车牌号"></a>检测车牌号</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;$/</span>;<br>reg.test(<span class="hljs-string">&#x27;苏A86826&#x27;</span>) <span class="hljs-comment">//true</span><br>reg.test(<span class="hljs-string">&#x27;江B53893&#x27;</span>) <span class="hljs-comment">//fasle</span><br></code></pre></td></tr></table></figure><p>图解：</p><p><img src="http://img.datalearn.top/mweb/regexp9.png" alt="regexp9"></p><h2 id="检测URL地址"><a href="#检测URL地址" class="headerlink" title="检测URL地址"></a>检测URL地址</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^((https?|ftp|file):\/\/)?([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)([\/\w \.-]*)*\/?$/</span><br>reg.test(<span class="hljs-string">&#x27;http://www.test.com&#x27;</span>) <span class="hljs-comment">//true</span><br>reg.test(<span class="hljs-string">&#x27;http:\\www.test.com&#x27;</span>) <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>图解：</p><p><img src="http://img.datalearn.top/mweb/regexp10.png" alt="regexp10"></p><h2 id="检测ip地址"><a href="#检测ip地址" class="headerlink" title="检测ip地址"></a>检测ip地址</h2><h3 id="ipv4地址"><a href="#ipv4地址" class="headerlink" title="ipv4地址"></a>ipv4地址</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</span>;<br>reg.test(<span class="hljs-string">&quot;115.28.47.26&quot;</span>);  <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>图解：</p><p><img src="http://img.datalearn.top/mweb/regexp11.png" alt="regexp11"></p><h3 id="IPv6地址"><a href="#IPv6地址" class="headerlink" title="IPv6地址"></a>IPv6地址</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg =<span class="hljs-regexp">/(([0-9a-fA-F]&#123;1,4&#125;:)&#123;7,7&#125;[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,7&#125;:|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,6&#125;:[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,5&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,2&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,3&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,3&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,2&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,5&#125;|[0-9a-fA-F]&#123;1,4&#125;:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,6&#125;)|:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,7&#125;|:)|fe80:(:[0-9a-fA-F]&#123;0,4&#125;)&#123;0,4&#125;%[0-9a-zA-Z]&#123;1,&#125;|::(ffff(:0&#123;1,4&#125;)&#123;0,1&#125;:)&#123;0,1&#125;((25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])\.)&#123;3,3&#125;(25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;:((25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])\.)&#123;3,3&#125;(25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9]))/</span>;<br>reg.test(<span class="hljs-string">&quot;fe80:0000:0000:0000:0204:61ff:fe9d:f156&quot;</span>);  <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>由于图解太过复杂，想了解的同学可以去这个网站上<a href="http://www.regexper.com/">http://www.regexper.com</a> 进行解析查看。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>感谢你看到这里，文章可能还有不足和需要改正的地方，欢迎在评论区留下你的建议。如果觉得本篇文章对你有点帮助的话，可以点赞或者分享给你的朋友。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你的Mac需要这样一款清新简洁的壁纸软件pap.er</title>
    <link href="/2020/02/23/paper/"/>
    <url>/2020/02/23/paper/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>每次在我拿到新电脑的的那一刻，开机设置好一切后，就是给它换个壁纸。而我又不是一个喜欢将一张壁纸用到天荒地老的人，总喜欢收集一些满意的壁纸让它们按时间切换。<br>然而能让自己满意的壁纸并不是那么好找的，需要利用各种软件去手动检索。找到对应的壁纸后，可能又会由于分辨率不高而让我放弃下载。毕竟用着低于2K分辨率的壁纸，总觉得对不起这块屏幕，直到我遇见了<strong>pap.er</strong>。<br><img src="https://cdn.sspai.com/2020/02/22/a022c8126dd178e46cb490c9309bb72e.gif"></p><h3 id="界面初览"><a href="#界面初览" class="headerlink" title="界面初览"></a>界面初览</h3><p>第一次打开软件那一刻，真的被它惊艳到了，不是因为它界面有多么漂亮，功能有多么丰富。<br>而是它太简洁了，甚至可以说没有主界面，因为它打开后就是常驻状态栏的。<br>点击顶部状态栏的<code>P</code>图标后，简洁的界面便映入桌面。从第一版开始，pap.er就一直保持着顶部三个tab栏 的形式，前两个基本保持着最新和最热不变，而第三个则会根据当下热点的不同而改变，比如：春<code>节</code>、<code>中秋</code>、<code>圣诞</code>、<code>夏季</code>、<code>冬季</code>或者是像现在的<code>希望</code>等。<br>tab栏的上方则是pap.er的透明logo和历史下载的图片及设置功能。界面的左下角则是刷新图标。<br><img src="https://cdn.sspai.com/2020/02/22/b36a4a0673f6e86e90bf690f52170d02.png"></p><h3 id="功能细探"><a href="#功能细探" class="headerlink" title="功能细探"></a>功能细探</h3><h4 id="即时下载"><a href="#即时下载" class="headerlink" title="即时下载"></a>即时下载</h4><p>当你的鼠标移到某一张壁纸上后，会浮现出<code>设为桌面</code>的按钮，点击后即可把下载当前壁纸并把它设为你的桌面。当然，你也可以继续寻找下一个让你满意的壁纸。<strong>（壁纸来源于Unsplash）</strong><br><img src="https://cdn.sspai.com/2020/02/22/2100ca535571a50e6f921cb403c6ea9c.jpg"></p><h4 id="壁纸管理"><a href="#壁纸管理" class="headerlink" title="壁纸管理"></a>壁纸管理</h4><p>点击界面顶部右上角的时钟倒计时的图标，你便可以看到你目前已经下载的壁纸和详细信息，它是4K或者5K的分辨率，当然你也可以把不喜欢的给删除掉。<br>所有的图片文件都会给你下载到一个默认的文件夹，一般为<code>/Users/用户名/Pictures/pap.er</code>，当然你也可以通过此界面的文件夹图标去打开访达去查看，或者在设置中更改默认的文件夹路径。<br><img src="https://cdn.sspai.com/2020/02/22/5918588a458c4ecfe68eb597d9fe4acd.png"></p><h4 id="个性化功能"><a href="#个性化功能" class="headerlink" title="个性化功能"></a>个性化功能</h4><p>在设置功能中，<code>pap.er</code>也给你提供了用户自定义的功能。你可以选择<code>随机换壁纸</code>：每小时或者每天从网络或者本地中切换壁纸。当然如果你有多个屏幕的话，也可以选择多屏统一来保证多个桌面的一致性。<br><img src="https://cdn.sspai.com/2020/02/22/a86a221fbf8b4389c98093e8976ad7cb.png"><br>我是希望开机自启动的软件越少越好，但我也想每小时从我的本地壁纸库中切换壁纸。所以我会在<code>系统设置</code>中，将<code>桌面与屏幕保护程序</code>的壁纸文件夹设为<code>pap.er</code>的默认文件夹。然后每过一段时间再打开软件去寻找新的壁纸。<br><img src="https://cdn.sspai.com/2020/02/22/91182d0a034348a8da87ae1cc82b888d.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我以前是一个非常喜欢折腾电脑桌面壁纸的人，总是下载各种不同的软件来实现各种酷炫的效果。但是折腾一段时间后，我发现桌面最重要的是简洁，而不是充满各种元素来分散自己的注意力。<del>（当然，电脑内存也吃不消）</del><br>这时候<code>pap.er</code>就恰巧出现了，就像它官网说的那样：</p><blockquote><p>专为 Mac 设计的壁纸应用，每天享受来自全球新鲜精美的壁纸。</p></blockquote><p>你可以在这里<a href="https://paperapp.net/">下载pap.er</a></p>]]></content>
    
    
    <categories>
      
      <category>应用推荐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue学习笔记（基础一）</title>
    <link href="/2019/12/21/learn-vue/"/>
    <url>/2019/12/21/learn-vue/</url>
    
    <content type="html"><![CDATA[<h3 id="Vue的声明式渲染"><a href="#Vue的声明式渲染" class="headerlink" title="Vue的声明式渲染"></a>Vue的声明式渲染</h3><p>下面是最简单的一个Vue声明式渲染的例子，只需要在html文件中引入vue的js文件。<br>然后敲下以下代码，你就成功创建了vue的第一个应用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data: &#123;<br><span class="javascript">                message: <span class="hljs-string">&#x27;Hello Vue!&#x27;</span></span><br>            &#125;,<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>现在数据<code>message</code>和 DOM 已经被建立了关联，所有东西都是响应式的。打开浏览器的  控制台 ，并修改 vm.message 的值，可以看到页面上的数据也进行了更新。</p><p><img src="http://img.datalearn.top/learnvue1-1.gif"></p><p>当然上面的代码<code>&lt;div &gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</code>也可以写成<code>&lt;div v-text=&quot;message&quot;&gt;&lt;/div&gt;</code><br>Vue的大部分指令都是以<code>v-</code>开头的，比如说：<code>v-text</code>、<code>v-for</code>、<code>v-model</code>、<code>v-if</code>等，这些指令在下面的章节中都会讲到。</p><h3 id="Vue的模板语法"><a href="#Vue的模板语法" class="headerlink" title="Vue的模板语法"></a>Vue的模板语法</h3><h4 id="插值-绑定文本数据"><a href="#插值-绑定文本数据" class="headerlink" title="插值-绑定文本数据"></a>插值-绑定文本数据</h4><p>数据绑定最常见的形式就是使用(双大括号) 语法 的文本插值,当然也可以使用<code>v-text</code>进行简单的数据绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span>&#123;&#123;data1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;data2&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data: &#123;<br><span class="javascript">               data1:<span class="hljs-string">&#x27;用&#123;&#123;&#125;&#125;进行绑定的&#x27;</span>,</span><br><span class="javascript">               data2:<span class="hljs-string">&#x27;用v-text进行绑定的&#x27;</span></span><br>            &#125;,<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打开控制台可以看到数据已经成功地被渲染到DOM结构中去了。</p><p><img src="http://img.datalearn.top/learnvue1-2.png"></p><p>在声明式渲染中提到过，vue的数据绑定是响应式的，数据发生改变，页面上的数据也会作出改变，但是你如果用<code>v-once</code>进行数据绑定。当数据改变时，插值处的内容不会更新，这个指令的意思是你只能进行一次的插值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-once</span>&gt;</span>&#123;&#123;data3&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data: &#123;<br><span class="javascript">               data3:<span class="hljs-string">&#x27;我不会被改变&#x27;</span>,</span><br>            &#125;,<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="绑定原始-HTML代码"><a href="#绑定原始-HTML代码" class="headerlink" title="绑定原始 HTML代码"></a>绑定原始 HTML代码</h4><p>双大括号或者<code>v-text</code>指令会将html代码解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，vue提供了 <code>v-html </code>指令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span>&#123;&#123;data4&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;data4&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;data4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data: &#123;<br><span class="handlebars"><span class="xml">               data4:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是一个h1的标题<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#x27;,</span></span><br>            &#125;,<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在浏览器中，可以发现使用<code>v-html </code>指令绑定的数据，已经成功将数据渲染成html代码内容</p><p><img src="http://img.datalearn.top/learnvue1-3.png"></p><h4 id="在指令中使用-JavaScript-表达式"><a href="#在指令中使用-JavaScript-表达式" class="headerlink" title="在指令中使用 JavaScript 表达式"></a>在指令中使用 JavaScript 表达式</h4><p>Vue中对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。你可以绑定一个求和运算公式、拆分数组或者三元表达式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span>计算5+6的值：&#123;&#123;data5+data6&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span>三元表达式：&#123;&#123;data7 ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>拆分重排数组：&#123;&#123; data8.split(&#x27;-&#x27;).reverse().join(&#x27;.&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data: &#123;<br>               data5:5,<br>               data6:6,<br><span class="javascript">               data7:<span class="hljs-literal">true</span>,</span><br><span class="javascript">               data8:<span class="hljs-string">&#x27;2019-12-20&#x27;</span></span><br>            &#125;,<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在浏览器的DOM结构中你可以看到，逻辑执行完成后的结果都已经成功的被渲染到绑定的元素上去了。</p><p><img src="http://img.datalearn.top/learnvue1-4.png"></p><h4 id="Vue中的指令"><a href="#Vue中的指令" class="headerlink" title="Vue中的指令"></a>Vue中的指令</h4><p>Vue中提供了很多指令，你可以通过这些指令很简单地实现一些功能。指令就像单个的JavaScript 表达式。当指令的值改变时，将其产生的连带影响，响应式地作用于 DOM结构中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data: &#123;<br><span class="javascript">               seen:<span class="hljs-literal">true</span></span><br>            &#125;,<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面代码中当<code>seen</code>的值为<code>true</code>时，会插入对应的<code>div</code>元素,当<code>seen</code>的值为<code>false</code>时，vue会移除绑定的<code>div</code>元素,在浏览器中的控制台键入<code>vm.seen=false</code>,即可看到页面中的元素消失了。</p><p><img src="http://img.datalearn.top/learnvue1-5.gif"></p><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。比如说a标签的<code>href</code>则可以用<code>:href</code>来表示，img标签的<code>src</code>可以用<code>:src</code>来表示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;baiduhref&quot;</span>&gt;</span>跳转百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;baiduimage&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data: &#123;<br><span class="javascript">               baiduhref:<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>,</span><br><span class="javascript">               baiduimage:<span class="hljs-string">&#x27;https://m.baidu.com/se/static/img/iphone/logo_web.png&#x27;</span></span><br>            &#125;,<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在浏览器中，打开控制台，可以很清楚的看到，跳转地址的链接和图片地址被绑定到对应的元素上去了。</p><p><img src="http://img.datalearn.top/learnvue1-6.png"></p><h3 id="计算属性computed和侦听器watch"><a href="#计算属性computed和侦听器watch" class="headerlink" title="计算属性computed和侦听器watch"></a>计算属性computed和侦听器watch</h3><h4 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h4><p>Vue的模板语法的表达式非常便利，用于简单运算也非常方便。但是如果在模板中放入太多的逻辑会让模板过重且难以维护，也尽量减少在模板内书写逻辑。比如说在模板内写入之前的数组拆分排序代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>拆分重排数组：&#123;&#123; data8.split(&#x27;-&#x27;).reverse().join(&#x27;.&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>所以，vue建议任何复杂的逻辑，都应该使用计算属性computed来实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;fullWorld&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data: &#123;<br><span class="javascript">                first: <span class="hljs-string">&quot;hello&quot;</span>,</span><br><span class="javascript">                last: <span class="hljs-string">&quot;world&quot;</span>,</span><br>            &#125;,<br>            computed: &#123;<br><span class="javascript">                <span class="hljs-function"><span class="hljs-title">fullWorld</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.first + <span class="hljs-string">&quot; , &quot;</span> + <span class="hljs-built_in">this</span>.last;</span><br>    <br>                &#125;<br>            &#125;,<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在页面中你可以看到输出了<code>hello , world</code>,说明计算属性中绑定的数据，已经成功地被渲染到DOM结构中去了。这里声明了一个计算属性 <code>fullWorld</code>，并且在模板中<code>div</code>标签绑定了这个计算属性<code>fullWorld</code></p><p><img src="http://img.datalearn.top/learnvue2-1.png"></p><p>计算属性 <code>fullWorld</code>的值 依赖于 <code>vm.first</code>和<code>vm.last</code>的值，所以当<code>vm.first</code>和<code>vm.last</code>的值 其中一个发生改变时，所有依赖 <code>fullWorld</code>的绑定的值也会更新,这就是计算属性的响应式更新。</p><p><img src="http://img.datalearn.top/learnvue2-2.gif"></p><h4 id="计算属性的getter和setter"><a href="#计算属性的getter和setter" class="headerlink" title="计算属性的getter和setter"></a>计算属性的getter和setter</h4><p>计算属性默认自带getter和setter两个方法，计算逻辑默认在getter方法中执行。<br>所以下面两段代码结果是相同的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">computed: &#123;<br>       fullWorld() &#123;<br>         return this.first + &quot; , &quot; + this.last;<br>       &#125;<br>     &#125;<br></code></pre></td></tr></table></figure><p>在get中执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">computed: &#123;<br>  fullWorld:&#123;<br>    get()&#123;<br>        return this.first + &quot; , &quot; + this.last;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>计算属性中setter方法会接收一个参数 <code>set(value)</code>——即计算属性的值 ，你可以通过这个值，来对它进行一些处理，这是个异步的方法，所以setter中处理后的方法并不会立即渲染到DOM结构中去。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span> &#123;&#123;resultWord&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClick&quot;</span>&gt;</span>改变数值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data: &#123;<br><span class="javascript">                firstWord:<span class="hljs-string">&quot;a&quot;</span>,</span><br><span class="javascript">                secondWord:<span class="hljs-string">&quot;b&quot;</span>,</span><br>            &#125;,<br>            computed: &#123;<br>                resultWord:&#123;<br><span class="javascript">                    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                       <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.resultWord = <span class="hljs-built_in">this</span>.firstWord + <span class="hljs-built_in">this</span>.secondWord</span><br>                    &#125;,<br><span class="javascript">                    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span>&#123;</span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;当前resultWord的值是:&quot;</span>+value)</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.firstWord = value+<span class="hljs-string">&quot;c&quot;</span>;</span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;计算属性setter中firstWord的值:&quot;</span>+<span class="hljs-built_in">this</span>.firstWord)</span><br>                    &#125;<br>                &#125;<br>            &#125;,<br>            methods: &#123;<br><span class="javascript">                <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.secondWord = <span class="hljs-string">&quot;z&quot;</span></span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;执行方法后resultWord的值:&quot;</span>+<span class="hljs-built_in">this</span>.resultWord)</span><br>                &#125;<br>            &#125;,<br><br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在浏览器中执行代码，你可以清楚的看到控制台中输出了<code>setter</code>执行过后，<code>resultWord</code>计算属性的所依赖的的<code>firstWord</code>值是<code>abc</code>，但是页面显示的依然是getter中执行后的结果<code>ab</code>。</p><p><img src="http://img.datalearn.top/learnvue2-3.gif"></p><h4 id="侦听器watch"><a href="#侦听器watch" class="headerlink" title="侦听器watch"></a>侦听器watch</h4><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。 Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，用watch比较合适。<br>watch 的一个特点是，最初绑定的时候是不会执行的，要等到数据发生变化时才会执行监听计算。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span> fullName的值：&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span> firstName的值：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data: &#123;<br><span class="javascript">                firstName:<span class="hljs-string">&quot;Michael&quot;</span>,</span><br><span class="javascript">                lastName:<span class="hljs-string">&quot;Jackson&quot;</span>,</span><br>            &#125;,<br>            watch: &#123;<br><span class="javascript">                <span class="hljs-function"><span class="hljs-title">firstName</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.fullName = <span class="hljs-built_in">this</span>.firstName+ <span class="hljs-built_in">this</span>.lastName</span><br>               &#125;<br>            &#125;,<br><br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面代码在页面初次渲染的时候，watch没有执行，而当firstName发生改变的时候，watch才会执行监听方法。</p><p><img src="http://img.datalearn.top/learnvue2-4.gif"></p><blockquote><p><code> 计算属性computed</code>和<code>侦听器watch</code>其实都是vue对监听器的实现，只不过computed主要用于对同步数据的处理，watch则主要用于观测某个值的变化去完成一段开销较大的复杂业务逻辑。能用computed的时候优先用computed，避免了多个数据影响其中某个数据时多次调用watch的尴尬情况。</p></blockquote><h3 id="Class-和Style样式的-绑定"><a href="#Class-和Style样式的-绑定" class="headerlink" title="Class 和Style样式的 绑定"></a>Class 和Style样式的 绑定</h3><p>我们在开发中，经常会涉及到改变元素样式的功能，这就需要我们动态的去给元素绑定和改变样式，vue也对这种需求提供了很友好的支持。</p><h4 id="使用对象语法绑定class"><a href="#使用对象语法绑定class" class="headerlink" title="使用对象语法绑定class"></a>使用对象语法绑定class</h4><p>在Vue中,我们可以通过传给 <code>:class </code>一个对象，实现动态地切换 class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.active</span>&#123;</span><br>        color: green;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span>isACtive是true的时候我就是绿色的<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">              <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                isActive:<span class="hljs-literal">false</span></span><br>              &#125;<br>          &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述代码中，active 这个 class 是否绑定到元素上了，取决于isActive的值是true还是false，当isActive是false的时候，可以看到元素中的class是空的，而当isActive的值变为true的时候，元素中的class便增加了一个active。</p><p><img src="http://img.datalearn.top/learnvue3-1.gif"></p><p>当然，你也可以在元素中传入多个属性来动态切换多个 class。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; active: isActive,default:isDefault,danger:isDanger &#125;&quot;</span>&gt;</span>绑定多个属性<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">              <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                isActive:<span class="hljs-literal">false</span>,</span><br><span class="javascript">                isDefault:<span class="hljs-literal">true</span>,</span><br><span class="javascript">                isDanger:<span class="hljs-literal">true</span>,</span><br>              &#125;<br>          &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时，由于  isDefault和  isDanger的值为true，所以元素上绑定的class仅有default和danger。</p><p><img src="http://img.datalearn.top/learnvue3-2.png"></p><p>当然，<code>:class</code> 指令也可以与普通的 <code>class </code>属性也是共存的，这时候，div元素的class便是default和danger。<br><code>&lt;div class=&quot;default&quot; :class=&quot;&#123; danger:isDanger &#125;&quot;&gt;两种方式共存&lt;/div&gt;</code><br>上述代码便渲染成：<br><code>&lt;div class=&quot;default  danger&quot;&gt;&lt;/div&gt;</code><br>当然，我们也可以用计算属性computed来进行绑定，比如以下示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.active</span>&#123;</span><br>        color: green;<br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.default</span>&#123;</span><br>        width: 100px;<br>        height: 20px;<br><span class="css">        <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-id">#999</span>;</span><br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.danger</span>&#123;</span><br>        font-weight: 900;<br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.error</span>&#123;</span><br>        font-style: italic; <br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; error:isError &#125;&quot;</span>&gt;</span>计算属性绑定<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">              <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                isActive:<span class="hljs-literal">false</span>,</span><br><span class="javascript">                isDefault:<span class="hljs-literal">true</span>,</span><br><span class="javascript">                isDanger:<span class="hljs-literal">true</span>,</span><br>              &#125;<br>          &#125;,<br>          computed:&#123;<br><span class="javascript">              <span class="hljs-function"><span class="hljs-title">isError</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span>.isDefault &amp;&amp; <span class="hljs-built_in">this</span>.isDanger)</span><br>              &#125;<br>          &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述代码的意思为，由于<code>isDefault</code>和<code>isDanger</code>的值是相同的，都为<code>true</code>，所以计算属性中<code>this.isDefault &amp;&amp; this.isDanger</code>的值也为<code>true</code>，所以isError的值为<code>true</code>，那么目前的元素的绑定class就是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active error&quot;</span>&gt;</span>计算属性绑定<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>而当  <code>isDefault</code>或者<code>isDanger</code>的其中一个值变为<code>false</code>，那么此时isError的值变成为了<code>false</code>，那么现在元素绑定的class便是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active &quot;</span>&gt;</span>计算属性绑定<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用数组语法绑定class"><a href="#使用数组语法绑定class" class="headerlink" title="使用数组语法绑定class"></a>使用数组语法绑定class</h4><p>在Vue中，我们也可以通过一个数组传给<code>:class</code>，实现元素绑定一个calss列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.active</span>&#123;</span><br>        color: green;<br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.error</span>&#123;</span><br>        font-style: italic; <br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>  <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[activeClass, errorClass]&quot;</span> &gt;</span>数组形式<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">              <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                activeClass:<span class="hljs-string">&#x27;active&#x27;</span>,</span><br><span class="javascript">                errorClass:<span class="hljs-string">&#x27;error&#x27;</span></span><br>              &#125;<br>          &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时，对应div元素便渲染为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active error&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然也可以根据条件切换列表中的 class，可以用三元表达式来实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[isActive ? activeClass : errorClass,activeClass]&quot;</span>&gt;</span>根据条件切换列表中的class<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时，页面中的对应div元素绑定的class便为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;error active&quot;</span>&gt;</span>根据条件切换列表中的class<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然，在数组语法中也是可以用对象语法来实现动态绑定class的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;[&#123; active: isActive &#125;, errorClass]&quot;</span>&gt;</span>数组语法中使用对象语法<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用对象语法绑定style样式"><a href="#使用对象语法绑定style样式" class="headerlink" title="使用对象语法绑定style样式"></a>使用对象语法绑定style样式</h4><p>在Vue中可以使用<code>:style</code>语法进行样式的绑定:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span>style的绑定<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data: &#123;<br><span class="javascript">                activeColor: <span class="hljs-string">&quot;red&quot;</span>,</span><br>                fontSize: 20,<br>            &#125;,<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时，页面中对应的div元素的样式便被渲染成为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red; font-size: 20px;&quot;</span>&gt;</span>style的绑定<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然也可以直接绑定到一个样式对象中去：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styleObject&quot;</span>&gt;</span>直接绑定一个样式对象<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data: &#123;<br>                styleObject: &#123;<br><span class="javascript">                    color: <span class="hljs-string">&#x27;blue&#x27;</span>,</span><br><span class="javascript">                    fontSize: <span class="hljs-string">&#x27;16px&#x27;</span></span><br>        &#125;<br>            &#125;,<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样看起来也更加清晰明了，效果如下图所示：</p><p><img src="http://img.datalearn.top/learnvue3-3.png"></p><p>当然，对象语法也可以结合返回对象的计算属性使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;extraStyle&quot;</span>&gt;</span>计算属性绑定<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>            computed: &#123;<br><span class="javascript">               <span class="hljs-function"><span class="hljs-title">extraStyle</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                   <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                    color: <span class="hljs-string">&#x27;green&#x27;</span>,</span><br><span class="javascript">                    fontSize: <span class="hljs-string">&#x27;20px&#x27;</span></span><br>                   &#125;<br>               &#125;<br>            &#125;,<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述代码执行效果如下图所示：</p><p><img src="http://img.datalearn.top/learnvue3-4.png"></p><h4 id="使用数组语法绑定style样式"><a href="#使用数组语法绑定style样式" class="headerlink" title="使用数组语法绑定style样式"></a>使用数组语法绑定style样式</h4><p><code>:style </code>的数组语法可以将多个样式对象应用到同一个元素上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;[ object1, object2]&quot;</span>&gt;</span>数组语法绑定多个对象<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data: &#123;<br>                object1:&#123;<br><span class="javascript">                    color:<span class="hljs-string">&#x27;grey&#x27;</span></span><br>                &#125;<br>            &#125;,<br>            computed: &#123;<br><span class="javascript">               <span class="hljs-function"><span class="hljs-title">object2</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                        fontSize:<span class="hljs-string">&#x27;24px&#x27;</span></span><br>                    &#125;<br>               &#125;<br>            &#125;,<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么此时页面中对应style的样式便是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: grey; font-size: 24px;&quot;</span>&gt;</span>数组语法绑定多个对象<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>裸辞这一百天</title>
    <link href="/2019/07/31/100/"/>
    <url>/2019/07/31/100/</url>
    
    <content type="html"><![CDATA[<h2 id="正式离职"><a href="#正式离职" class="headerlink" title="正式离职"></a>正式离职</h2><p>   2019年4月1日，我将笔记本电脑塞进双肩包，离开了呆了900多天的公司。手上没有offer，也没有打算继续找工作，自己想裸辞安静一段时间，算是自己的一次小任性吧。   </p><h2 id="为什么要裸辞？"><a href="#为什么要裸辞？" class="headerlink" title="为什么要裸辞？"></a>为什么要裸辞？</h2><h3 id="我要逃离舒适圈"><a href="#我要逃离舒适圈" class="headerlink" title="我要逃离舒适圈"></a>我要逃离舒适圈</h3><p>我从2016年10月的实习到转正就一直呆在这家公司。说每天或许不太可能，但是几乎每周都在学到新知识，感觉到自己在进步，在成长。虽然当时工资很低，但是觉得自己一直都在提高，这就够了。</p><p>然而到了2018年5月左右，我突然感觉，我好长时间没学到新知识了，我好久都没变化了，最近好像一直在做重复性的工作。当这些念头闪过的时候，我感到很恐慌，我怀疑自己在停滞不前。这种情况持续了一年左右，我好像陷入了舒适圈，我需要逃离它，让自己及时止损。</p><h3 id="对开发工作的向往"><a href="#对开发工作的向往" class="headerlink" title="对开发工作的向往"></a>对开发工作的向往</h3><p>我从实习开始我的职位就一直是PM，虽然期间没出现过大的问题，但我总认为，在互联网软件这一行业，作为一个管理岗的人员，如果没有技术经验，做起管理来是没有底气的。</p><p>我大学学的专业是开发，内心对开发工作也一直存在一种向往，我觉得写代码是一件很有创造性的工作。我这才毕业不到2年，趁着年轻何不多去试试呢。</p><h3 id="公司的这一层面"><a href="#公司的这一层面" class="headerlink" title="公司的这一层面"></a>公司的这一层面</h3><p>公司有很多优点，我也一直对它心存感激。但后面随着公司业务和规模的日益扩大，内部也在不断改革，弊端也慢慢暴露了出来：繁琐不合理的流程、严苛的KPI考核制度，互相推诿甩锅的风气等等，这些缺点到后面甚至愈演愈烈。</p><p>我觉得上述这些缺点对一项工作的高效执行阻碍简直太大了。对于这些弊端，我一直忍了很长时间，甚至选择去忽视它们。然而当我得知领导想让我大年初五提前结束假期去出差，我便立刻打开了word写好辞职报告，提交给了公司。</p><h2 id="裸辞这段时间干什么？"><a href="#裸辞这段时间干什么？" class="headerlink" title="裸辞这段时间干什么？"></a>裸辞这段时间干什么？</h2><h3 id="锻炼自己的自控力。"><a href="#锻炼自己的自控力。" class="headerlink" title="锻炼自己的自控力。"></a>锻炼自己的自控力。</h3><p>我的自控力一直都很差，所以至今也没有什么能拿得出手的事情。无论是生活、学业还是工作，做的都很普通，甚至是有些差劲。我觉得一个人进入大学后，学业和事业能取得什么样的成绩大部分取决于自己自控力的强弱。现在大部分人容易被手机、电脑、游戏所干扰到，是很难静下心来去专注做一件事的。</p><h3 id="好好的审视一下自己。"><a href="#好好的审视一下自己。" class="headerlink" title="好好的审视一下自己。"></a>好好的审视一下自己。</h3><p>开始在公司实习后，我就一直忙于工作，一直没有时间去好好反思一下自己。趁着裸辞的这段时间，可以对之前的工作进行一个复盘，并且去好好地审视一下自己。</p><h3 id="尝试坚持着去做一件事。"><a href="#尝试坚持着去做一件事。" class="headerlink" title="尝试坚持着去做一件事。"></a>尝试坚持着去做一件事。</h3><p>坚持去做一件事，这句话说起来有点可笑，但是仔细想想我真的没有坚持做过一件事，如果毕业后坚持每天记账算的话，那也算是一件吧。但这只是一件微不足道的事情，我想尝试长时间坚持做其它事情，比如说：坚持锻炼，坚持阅读，坚持学习亦或者是坚持每天git push。希望到后面，不是我有意识地去坚持，而是变成了无意识的习惯。</p><h3 id="考验一下我的自学能力。"><a href="#考验一下我的自学能力。" class="headerlink" title="考验一下我的自学能力。"></a>考验一下我的自学能力。</h3><p>踏入大学以来，我意识到自己的自学能力很差劲。有时候抱着一本书，或者看教学视频，并不能快速的得到其中的知识。这种情况往复循环，我浪费了大量的时间在这种低效的学习上面，并且还在持续。每次意识到自己这个缺点，都会非常痛苦，觉得自己一无是处。</p><h3 id="给自己一个安静的时间。"><a href="#给自己一个安静的时间。" class="headerlink" title="给自己一个安静的时间。"></a>给自己一个安静的时间。</h3><p>实习以来，由于工作岗位的性质，每天真的是从早忙到晚。电话、微信、钉钉、QQ、邮件等沟通工具无时无刻地不在响，各种软件的群消息多到满天飞，即使设置群免打扰，也有大量的人在群里@你。早上7:00到凌晨1:00，都要做好收到消息及时回复的准备，偶尔还会凌晨召开电话会议讨论方案。如果线上环境出问题了，那就是通宵也要解决的事情。感觉自己一天下来，没有给自己单独思考的机会，我需要找个时间好好安静一下。</p><h2 id="离职后的情况"><a href="#离职后的情况" class="headerlink" title="离职后的情况"></a>离职后的情况</h2><p>离职后的第二天，我便开始了我的学习计划。每天计划的内容包括上午、下午和晚上分别吃什么、学什么，以及吃完晚饭后去附近的学校操场跑步。</p><h3 id="自控力这点很失败"><a href="#自控力这点很失败" class="headerlink" title="自控力这点很失败"></a>自控力这点很失败</h3><p>看似安排的很好，但仅仅是学习这一点，我都没坚持很长时间。坚持了大概七八天左右，我就专注不下去了，为什么呢？因为我在一台有着高速网络的电脑上写代码，旁边还放着一个手机。我总是会去打开一些视频网站和社交软件，难以静下心来去专注在学习上。<br>我仔细想了一下造成这个结果的原因：</p><h4 id="诱惑和干扰因素太多"><a href="#诱惑和干扰因素太多" class="headerlink" title="诱惑和干扰因素太多"></a>诱惑和干扰因素太多</h4><p>我鼠标一点便可打开一个视频网站，小手一滑便可打开一个社交APP，这些诱惑或者是干扰因素太过触手可及。人的本质其实是惰性的，倾向于看那些不用去主动思考的事物，而看书学习是要自己动脑思考的，这样就违背了人类的天性，而大脑则会倾向于选择如何让自己更舒服。<del>打开b站看个鬼畜视频它不香嘛</del>。</p><h4 id="学习这种事反馈周期太长"><a href="#学习这种事反馈周期太长" class="headerlink" title="学习这种事反馈周期太长"></a>学习这种事反馈周期太长</h4><p>学习、读书包括健身这种事情，是需要长时间坚持才会收获成效的，它们的反馈周期太长，你去学一两个月，是完全不知道自己的进度和成果的，一件短时间内看不到进度的事情则会消耗一个人长期坚持下去的意志力的。反观其它消耗性事情，比如说游戏，你玩一会，升一级，玩一会，升一级。有的手游不到一小时能升到15级，这个进度就太可观了。只要1小时我就知道自己变强了那么多，连战斗力都是用数字显示的，我为啥不去玩游戏呢。</p><p>这就属于短期的快感，反馈周期非常及时，这也是当下抖音快手等短视频平台火爆的原因，刷完一个短视频，接着刷下一个。而像学习健身这样反馈周期长的事情真的是太难坚持下去了，学了1个月，我完全不知道自己学习的一个进度，这件事情对我的效果如何，无法很明显的察觉到。</p><h4 id="学习的课程太多"><a href="#学习的课程太多" class="headerlink" title="学习的课程太多"></a>学习的课程太多</h4><p>辞职之前，我提前下载好了JavaScript课程，CSS课程，vue课程、react课程，相同的课程我还下载了许多不同的版本。我现在才知道这种做法是有多么的蠢，就像我之前买kindle一样，喜欢屯书，一个kindle下载了将近100本电子书。这种做法导致的后果就是:程没看多少，书也没看多少，反而浪费了太多寻找课程和书籍资源的时间。所以，不要买太多的课程或者去屯书，你就设定一个目标就好，当你的选项变多的时候，你就会迷茫，不知道该去选哪一个。</p><h3 id="审视自己，认识自己"><a href="#审视自己，认识自己" class="headerlink" title="审视自己，认识自己"></a>审视自己，认识自己</h3><h4 id="回顾自己"><a href="#回顾自己" class="headerlink" title="回顾自己"></a>回顾自己</h4><p>在大学毕业之前我是一个内向、不喜欢说话、不会主动、不敢当众发言、说话吞吞吐吐，甚至有些自卑和怀疑自己的人。开始的时候，领导或者同事和我谈论工作，我没听清楚，我都不敢启齿问第二遍，因为我怕，我怕他们怀疑我是不是耳朵不好还是脑子有问题，我怕他们怀疑我的能力，我怕丢人。</p><p>但作为一个项目经理，我必须时刻保持充分的自信，表现自己是专业的。项目经理需要和客户沟通需求、在方案讨论会上发言、管理和协调内部人员、给内部和外部汇报工作、给客户做培训等。对于我来说，这些事情之前是想都不敢想的，我害怕去做这些事情。但是我又不能不做，我不做，万一公司把我开了怎么办，我只能硬着头皮上了。</p><p>从第一次给客户打电话的满手冒冷汗到后来的和客户有说有笑、第一次发言的打结和不专业到后来的对答如流淡定从容、从开始的团队没人理我到后来对我的充分信任。我真的不敢相信，这些我都做到了，尽管有些地方不尽如人意，但我觉得自己一直在改变。</p><p>项目经理的工作恰好的弥补了我之前的一些短板。我真的很感谢领导和公司给我提供了这样的平台和机会，也感谢他们从一开始的担心疑虑到后来的充分信任。虽然辞职了，但是我真的很感激这家公司，它带给我太多前所未有的挑战与改变。</p><h4 id="反思和认识自己"><a href="#反思和认识自己" class="headerlink" title="反思和认识自己"></a>反思和认识自己</h4><p>我觉得每隔一段时间给自己做一个复盘是很有必要性的，回顾自己之前做的事，哪些是值得称赞的、哪些是需要改进的、哪些错误是不能再犯的、以及了解会犯这些错误的原因等方面。只有持续对生活和工作进行一个复盘，自己才会获得长足的进步，不然会活的很麻木。</p><p>最后就是要清楚地认识自己，我觉得这是最重要的一点。我们需要知道自己性格如何，自己有什么优缺点，自己适合做什么，喜欢什么样的生活方式。这也是我们目前最缺失的东西，我们从小被教育上学，高考选择热门合适的专业，毕业后根据专业找工作。我们好像从来没有机会去思考，自己喜欢干什么，自己适合干什么，自己内心到底想要成为什么样的人。</p><p>而且，认识自己一定要建立在自己和世界不断交互的反馈上，其实就是不断地去试错，最终才能逐渐收敛到一个真实的值。而如果是自己想当然，自以为是，或者被外部的其它言论所裹挟而产生的错觉，往往会误导一个人，造成对自我的认识产生偏差。</p><h3 id="坚持做的那些事情"><a href="#坚持做的那些事情" class="headerlink" title="坚持做的那些事情"></a>坚持做的那些事情</h3><p>虽然裸辞期间，在坚持学习上做的很失败。但是我还是在这三个月内坚持做了一些事情，坚持每天不点外卖，健康饮食、坚持每天跑步和跳绳。</p><p>这些相对于坚持学习来说，难度要小的多。我很庆幸自己能坚持下来这些，这些事情持续做了三个月后，身体状况较之前的确改善了很多：可以一次性围着操场跑上8公里，可以坚持跳绳一个小时。三个月后除了体重上减了10斤，个人的意志力也得到了锻炼。</p><h3 id="自学能力怎么样"><a href="#自学能力怎么样" class="headerlink" title="自学能力怎么样"></a>自学能力怎么样</h3><p>自学能力这点我是很失败的。我尝试过，在看了一天的书和对应的教学视频后，对应的知识点我到底能记住和理解多少？最终的结果是:我并没有记住多少，更深层次的就不用说了，记住的那些基本都是很浅显的知识和理论。如果第二天或者第三天不去复习，绝对会忘得干干净净。</p><h4 id="自学期间糟糕的情况"><a href="#自学期间糟糕的情况" class="headerlink" title="自学期间糟糕的情况"></a>自学期间糟糕的情况</h4><p>这种情况简直太糟糕了，因为我浪费了时间和精力，到最后什么也没有得到，一年下来我或许一大部分的时间都是这样度过的，这样到底和废物又有什么区别。我一直都在想到底是什么造成了这种状况，我觉得最大的原因就是不够专注，我在学习的时候，并没有全身心地投入到学习中去，我脑子里总会想一些其它的事情，比如说，中午吃什么，打开知乎看一下吧，打开微博看一下吧，打开微信看看群消息等等。</p><p>诸如这些，有太多太多的干扰因素在脑子里，当然这是我自己的问题，并不是说把微信退出了，或者把手机扔到一边，或是把电脑的网络给断掉就能解决掉。就算我把手机放到厨房里，我学习一段时间也会想方设法地去看一眼手机。</p><h4 id="自学必须保持高度的专注力"><a href="#自学必须保持高度的专注力" class="headerlink" title="自学必须保持高度的专注力"></a>自学必须保持高度的专注力</h4><p>我的自学水平的确是极其低效的，尤其是一个人在那里看书和教程的时候，心里的杂念太多。我觉得一个人的发展与未来和自己的学习能力简直是密切相关的，尤其是在互联网软件这个高速发展和技术不断更新迭代的这个行业。如果你想保持自身的一个竞争力，就要不断的去学习，新知识，新技术，才能保证自己有权要求更高的薪资，才能保证自己不被刚毕业的应届生给替换掉。</p><p>而且，大部分的人的专注力其实都是很弱的，尤其是在现在一个人们普遍享受“奶嘴乐”的社会中，能长时间保持高度专注的人简直是凤毛麟角。之前上学的时候，有一句话是：”玩的时候好好玩，学的时候好好学”，的确我见过的那些学霸或者是在自己的领域有突出成就的人，玩的并不比我们少，他们比普通人厉害就厉害在，他们在学习的时候，保持专注力，效率极高，能够快速的获取和理解知识，这样他们也有时间来玩。事半功倍居然比事倍功半要高出四个单位的值，可见全身心地保持高度专注力的投入到一件事情中去有多么重要。</p><h3 id="安静下来怎么样"><a href="#安静下来怎么样" class="headerlink" title="安静下来怎么样"></a>安静下来怎么样</h3><p>辞职之后，世界好像突然安静了下来了。钉钉、微信、QQ、电话等沟通工具不再每天有那么多的消息通知，虽然有的群我没退，但是工作群里也不会有人@你了，他们讨论他们的，什么事情都与我无关了。和我住在一起的朋友也是早出晚归的，一天都不会有人和我说话 ，好像突然与世隔绝了一般。</p><p><strong>这样舒服吗？</strong>并没有，我感觉好不自在，好不适应这种不忙碌的生活。朋友，同学和同事们都有他们的工作要忙，而我只能一个人坐在家里，一个人对着电脑，没有人和我说话，除了吃饭，我一天都不用动口张嘴。一开始真的很不适应，甚至有点难受，然后会主动打开微信主动找人聊天。后来过了一段时间后，这种情况逐渐缓和了下来，想想也就这几个月了，要好好把握这种独处的生活，让大脑放松下来，有时候我会关闭电脑，手机静音，然后一个人坐在那里，闭上眼睛冥想个半个小时左右，这种感觉特别好，与睡觉不同，冥想是有意识的休息与放空自己，前面也说过，我在学习读书的时候，脑子里总是会有一些杂念，不能保持专注，经过半小时左右的冥想以后，杂念似乎也减少了许多。</p><h2 id="最后的总结"><a href="#最后的总结" class="headerlink" title="最后的总结"></a>最后的总结</h2><h3 id="后悔裸辞嘛"><a href="#后悔裸辞嘛" class="headerlink" title="后悔裸辞嘛"></a>后悔裸辞嘛</h3><p>后悔，我太高估了我的自控力和学习能力了。其实裸辞三个月给自己学习只是安慰自己与解释给他人的说辞罢了。三个月，我总结一下，学习下来的时间甚至还不到一个月。其实，如果你工作不是996的话，是完全可以利用每天的下班时间和周末去进行学习和充电的。包括读书、健身和安静下来这些事，都是可以通过这些空余时间来做的。我的这次裸辞学习很失败，不仅浪费了时间和金钱，还消耗了大量的精力在这些无用功上面。</p><h3 id="裸辞期间的收获"><a href="#裸辞期间的收获" class="headerlink" title="裸辞期间的收获"></a>裸辞期间的收获</h3><ol><li>坚持锻炼真的对身体有好处，上班后整天坐在办公室，下班后不是腰疼就是脖子疼的，自从开始跑步后，这种情况基本是没有了。</li><li>少吃外卖，外卖重盐重油，卫生不卫生不说，吃多了真的不健康，如果实在懒得做饭，早饭和晚饭可以选择冲剂的黑芝麻糊或者红豆薏米粉等，虽然难吃，但是对健康真的有好处。</li><li>每天或者每周做个反思对自己有好处的，生活上的，工作上的，你可以自己主动的去发现问题，去研究问题，去解决问题。</li><li>读书真的可以明智。我以前是拒绝读书的，认为读书的作用远没有说的那么大。但自从我尝试着阅读第一本书之后，我发现我还是可以看下去的，并且真的有收获。我觉得豆瓣8分以上的书，都是值得一读的，毕竟读书的人要求多苛刻啊，稍微有一点瑕疵，都会给你一星差评。能一直保持8分以上的书，说明还是有其价值的。</li><li>看人优点，而不是去找人缺点。你去发现一个人的缺点或者否定他，对自己没有任何价值，每个人都不是完美的，但是你去发现一个人的优点，并从中学习复制到自己身上，这才是有价值的事情。</li></ol><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>接下来在7月里我面试了有10家公司，越来越感觉到这三个月是有多么的浪费，我真的没学到什么有用的知识。为了准备第二场面试，我还看了一个通宵的面试题，一晚没睡觉，天一亮，我就收拾去面试了，然而最终结果却是惨淡收场。</p><p>记得有一家做在线留学的互联网公司，面试我的是南大毕业的硕士，之前他是在阿里做架构师的。他刚进会议室，就给我感觉很有风度和气场。面试期间，我回答的很不好，最后他给我的评价是：对一些知识，知其然不知其所以然，而且并没有形成自己的一个知识结构，流于表面。我看着他说：这个的确是我的问题，我后面也会注意并去改进，谢谢提醒。</p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反思</tag>
      
      <tag>工作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>毕业两年后离职的一些感想</title>
    <link href="/2019/07/10/hanweb/"/>
    <url>/2019/07/10/hanweb/</url>
    
    <content type="html"><![CDATA[<h3 id="怎么进入公司的"><a href="#怎么进入公司的" class="headerlink" title="怎么进入公司的"></a>怎么进入公司的</h3><p>   当初9月秋季校园招聘会的时候，那大中午的，南京的太阳是真的毒啊。有几家在学生之间知名度比较高的公司，队伍排的老长，至少都要在太阳底下等1个小时。我拿着刚打印好的简历，真的快晒的眼睛都睁不开了，正好看到一家公司名字听着像是个大公司，前面就排了3个人，好，就决定是你了。</p><p>   我走到队伍后面，排我前面的是个女生，当面试官问她平常喜欢干嘛的时候，她自信的说出：平常喜欢唱歌和跳舞。真的把我的三观都震碎了一地，大姐，人家招的是移动开发工程师，你跑过来参加明星海选呢你。轮到我的时候，面试官看了看我的简历，问我喜欢干嘛？我拍着胸脯理直气壮地说道：平常最喜欢看书和写代码，偶尔逛一逛技术论坛和网友交流一下技术啥的（其实宿舍里的电脑还开着LOL）。可能是因为前后两人落差比较大吧，总之后面就顺利地进入了公司。</p><h3 id="对这家公司的看法"><a href="#对这家公司的看法" class="headerlink" title="对这家公司的看法"></a>对这家公司的看法</h3><p>   首先，我到现在为止，也感到很幸运能加入这家公司，作为毕业后的第一份工作，他给我带来的改变真的挺大的，我从来不后悔来到这家公司。我只写正面的事情，不想花时间写一些负能量的东西。</p><h3 id="个人改变相关"><a href="#个人改变相关" class="headerlink" title="个人改变相关"></a>个人改变相关</h3><p>   <strong>我本是一个非常内向的人，就是那种在熟人面前是个沙雕，但是一点也不想和陌生人交流的那类人</strong>。但是做项目经理就必须有很强的沟通能力和管理协调能力。这可真是难为死我了，我记得第一次给客户打电话的时候，由于过度紧张，放下手机后，发现手心都是汗，刚才打电话说的什么也全都忘了。辛亏当时还拿着笔记了几个需求重点，不然估计还要再打一遍😭（一刀杀了我算了）</p><p>当天下班回去后，我真的内心挣扎了好久，我真的能做项目经理吗？我连项目经理是干嘛的我都不知道，我到底该不该在这家公司呆下去？到最后，我说服我自己，最终还是坚持下来了。你不是内向嘛，这份工作正好适合你改变性格，反正是实习，尽力去做好，大不了辞职不干，反正还没毕业。</p><p>   到后面，给客户打电话、组织项目组开会、单独出差应对客户、给厅长演示、给部长演示、几十人的会议上发言，几百人的会议上培训等等，事情从小到大，这些我都尝试着做了，每一件事做之前，我都很紧张，我怕犯错，怕做不好，怕别人说。但是我都尽力去做了，<strong>尽管有些做的不尽如人意，但是我都在吸取教训，一点一滴地去改进，因为我不想去犯同样的错误</strong>。</p><p>   为什么要说这些呢？正省级、正国级的这些处于金字塔尖的这些难以接触到的人，不是因为我的能力，只是因为公司提供了这个平台，让我有机会在一段时间内和他们进行过很多的接触和交流，甚至在一群市级和省级领导面前演讲，我觉得这种经历是难得的，我可能以后都再也不会有这种类似的经历了。对我个人的锻炼和个人能力的提高也是很大的（比如我现在出去面试真的一点也不紧张，问题即使不会的也能淡定的瞎掰）。</p><p>   当然，这里我不是说我接触的人都是多么厉害的人，因为数量太少，掰掰手指都能数的过来。相反，由于工作原因，经常需要再全国各地出差，接触最多的是那些各地其他公司的普通员工，还有那些为生计疲于奔命的人。我在杭州见到那位年近半百，每天加班到凌晨，周末也坚持上班，只是为了给上学的孩子挣点学费钱的大龄程序员；我在成都见到那些早上8：00就要到单位打扫卫生、准备会议、端茶倒水的刚考进来的科员们；我在北京的凌晨见到那些身披着报纸，蜷缩在西二环某个墙角的流浪者们，那是北京的3月啊，寒风刮在脸上像刀割一样疼。我在绍兴见过，打扮精致的女孩嘴里叼着手抓饼。然后去早餐店买上一碗热粥递给路边的乞讨者。我在济南见过寒冬腊月的晚上11：00 ，还在火车站门口等着拉客的黑车司机，虽然这是违规，但他们的家里应该也有等爸爸回家的媳妇和孩子吧。</p><p>   有时候一个人在外面出差，下班后也没事。就特喜欢在人群嚷嚷的街边，站在那里去看那些人，那些形形色色的人，那些可能一辈子都不可能再见到的异乡人。各种层次的人见多了，对于我的改变或许是，<strong>我能更好地变换角度去思考问题</strong>，后面每当我和别人争吵，或者看别人不顺眼，或是责备公司的新人（这种情况比较少，我脾气还是蛮好的）都会在怒气上来的时候，去尝试站在对方的角度去思考问题。我如果是她，凭借自己听说的那些事情，或许也会这样认为；我当时做新人的时候，这些也不懂，也是需要别人教才知道的；千万不要看别人不顺眼，每个人都独立且平等的，看别人不顺眼就是自己的修养有问题等等。每次我都是通过这些方法去稳定住自己将要失控的情绪和失态的措辞。</p><p>  如果我一入职就是一名不会和客户接触、不会到处出差的开发人员的话，我可能性格不会发生这么翻天覆地的变化。</p><h3 id="人际交往相关"><a href="#人际交往相关" class="headerlink" title="人际交往相关"></a>人际交往相关</h3><p>   留在这个公司最大的一部分原因可能就是有一帮“沙雕”同事了。</p><p>   工作前，看到一些鸡汤文整天宣扬：同事就是同事，和朋友永远不沾边。除了工作以外，其它事情都不能说的理论。搞得我以为职场里都是一帮整天勾心斗角，尔虞我诈的心机表。毕业后，才发现，不是这样啊，之前那些文章写的都是些什么玩意儿，整天在那里贩卖焦虑，提升流量，全部取关。</p><p>   或许也是这个行业的原因吧，勾心斗角、找后门上位等等狗血的剧情在我们这里真的没有过（现在有一点了）。我记得17年的时候，大家在公司吃辣条、吃薯片、听音乐，一边码字一边讲段子，下午再定个奶茶。每个人都在专心做自己的事情，只要事情做好了，你干啥都没人管。感觉像在大学里在机房里上课，不就这个状态嘛，真是舒服的一批啊。比楼下网站那帮人气氛活跃多了，那边真是死气沉沉的。</p><p>   当然中间因为一位花名为胖头鱼的领导，搞的大家很不愉快。不过也正因如此，我们下面的几位同事关系才会如此的团结，一致向外。由于都是年轻人，<strong>大家三观都合得来，人品也都没问题</strong>，所以关系非常好。偶尔会线下聚餐，即使现在有的离职一年多了，也还是会保持联系。</p><p>   为什么留下来的原因是这个呢。或许正<strong>因为每天和沙雕们的互相调侃这件事，抵消掉了大部分来自于工作方面的负面情绪</strong>。即使工作再多，压力再大，大家也都是一起做，并没有感到不愉快。当然，每个人身上都有可圈可点之处，大家互相学习，共同进步，这就是我没有很快离职的最大原因。</p><p>   虽然说遇上胖头鱼是一件极其恶心的事情，但是也是幸运的。如果他没有那么恶心，或许不会有我那个已经置顶了将近2年的微信群。大部分人都会经历很多公司，但是像这样能够有一个保持联系的同事群，有一帮能够随时约出来吃饭看电影听你吐槽的朋友，估计在其它公司都是很少有的。所以，这也是我来到这家公司感到幸运的地方之一。</p><h3 id="职场工作相关"><a href="#职场工作相关" class="headerlink" title="职场工作相关"></a>职场工作相关</h3><p>   工作能力说起来就有点乏味了。</p><p>   虽然说上学时候做过几年班长，但是我的那一丢丢的管理能力的确是在公司锻炼出来的。上学的时候，无非就是：不要讲话了！再讲话记名字啦！然后组织一下班级活动啥的。但是在公司中，你的每一个行为真的都会涉及到每一个人的切身利益，需要维护好客户和公司之间的关系、处理好项目组成员之间的关系（感谢那些年大哥大姐们的不杀之恩）、处理好部门与部门之间的关系、处理好下属之间的平衡关系等等，让每个人在你这里都能公平地得到最大利益，并且能保证项目的顺利进行，部门工作的顺利开展。怪不得人说，中管真是里外不是人，因为维护好一方利益必定会损失另一方的利益。</p><p>   项目组成员凭什么给你加班赶项目、部门的同事凭什么听你安排项目。有可能你会说，他们做项目是为公司做的，又不是为了我，我并没有因此能多拿一分钱啊。但是，这就是责任，也是义务，项目经理就要担负起这种管理和协调的工作。</p><p>   <strong>工作中一定要多和领导沟通，及时汇报工作情况</strong>，最好每天都汇报。作为领导，最希望的就是尽可能的了解下属的工作内容和进度，如果长时间对一个下属的工作状态不了解，他会很焦虑，认为掌控不了你，所以就会给你主动给你打电话，给你发消息让你汇报工作或者谈心。当然作为一个下属，最重要的不是工作能力，而是减少领导的麻烦，即使一个人的工作能力再厉害，如果你的领导因为你而多了很多麻烦，那这个人离开除就不太远了。</p><p>   工作中向前辈或者领导问问题，不要直接抛一个问题给他，让他来解答，这相当于间接给他制造一个麻烦，建议最好，提问题之前自己好好思考过，然后给领导两个选项，关于这个问题，您觉得用A方案比较好，还是用B方案更稳妥。这样会让领导觉得你是一个会独立思考有想法的人，而不是只会无脑提问的人。</p><p>   <strong>工作中不要和领导玩心机</strong>，这点真的很重要，因为你玩的那些心机，真的太幼稚了。领导基本都是年龄比你大，资历比你深的，你想在他负责的工作中玩心机，真的会死的很惨。稍微聪明一点的领导就会一眼看穿，然后你在他的心中基本就没什么好形象了，完全就是心机婊一枚。</p><p>   还有就是，工作不是单纯为了工资，是为了提高自己的能力，提高在这个社会中的竞争力。你现在拿的工资和你现在的能力基本不会相差太远，你拿着4000的工资，能力可能价值7000，但是绝对没有9000。领导不都是傻子，谁厉害谁不厉害，大家都看在眼里的，如果不是对你怀恨在心，不会让你太吃亏的。</p><blockquote><p>慢慢成长，你会越来越觉得薪资多少对幸福感的影响是低于对工作本身热爱程度对幸福感的影响的。现在大多数年轻人不是贪财，而是喜欢钱堆出来的东西，喜欢钱带来的那种独立和自由的感觉。 </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
